# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021-2024, Andreas Dutzler
# This file is distributed under the same license as the FElupe package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FElupe\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-05-25 23:02+0000\n"
"PO-Revision-Date: 2024-05-25 22:51+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/193143/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../felupe/docs/tutorial/examples/README.rst:4
#: ../../felupe/docs/tutorial/index.rst:6
msgid "Beginner's Guide"
msgstr "„Éì„ÇÆ„Éä„Éº„Ç∫„Ç¨„Ç§„Éâ"

#: ../../felupe/docs/tutorial/examples/README.rst:6
#: ../../felupe/docs/tutorial/index.rst:8
msgid ""
"This minimal code-block covers the essential high-level parts of creating "
"and solving problems with FElupe. As an introductory example üë®‚Äçüè´, a quarter "
"model of a solid :class:`cube <felupe.Cube>` with hyperelastic material "
"behaviour is subjected to a :func:`~felupe.dof.uniaxial` elongation applied "
"at a clamped end-face."
msgstr ""

#: ../../felupe/docs/tutorial/examples/README.rst:8
#: ../../felupe/docs/tutorial/index.rst:10
msgid ""
"First, let‚Äôs import FElupe and create a meshed :class:`cube <felupe.Cube>` "
"out of :class:`hexahedron <felupe.Hexahedron>` cells with a given number of "
"points per axis. A numeric :class:`region <felupe.RegionHexahedron>`, pre-"
"defined for hexahedrons, is created on the mesh. A vector-valued "
"displacement :class:`field <felupe.Field>` is initiated on the region. Next,"
" a :class:`field container <felupe.FieldContainer>` is created on top of "
"this field."
msgstr ""

#: ../../felupe/docs/tutorial/examples/README.rst:10
#: ../../felupe/docs/tutorial/index.rst:12
msgid ""
"A :func:`~felupe.dof.uniaxial` load case is applied on the displacement "
":class:`field <felupe.Field>` stored inside the :class:`field container "
"<felupe.FieldContainer>`. This involves setting up "
":func:`~felupe.dof.symmetry` planes as well as the absolute value of the "
"prescribed displacement at the mesh-points on the right-end face of the "
"cube. The right-end face is *clamped* üõ†Ô∏è: only displacements in direction "
"*x* are allowed. The dict of :class:`boundary <felupe.Boundary>` conditions "
"for this pre-defined load case are returned as ``boundaries`` and the "
"partitioned degrees of freedom as well as the external displacements are "
"stored within the returned dict ``loadcase``."
msgstr ""

#: ../../felupe/docs/tutorial/examples/README.rst:12
#: ../../felupe/docs/tutorial/index.rst:14
msgid ""
"An isotropic pseudo-elastic :class:`Ogden-Roxburgh <felupe.OgdenRoxburgh>` "
"Mullins-softening model formulation in combination with an isotropic "
"hyperelastic :class:`Neo-Hookean <felupe.NeoHooke>` material formulation is "
"applied on the displacement :class:`field <felupe.Field>` of a "
":class:`nearly-incompressible solid body "
"<felupe.SolidBodyNearlyIncompressible>`."
msgstr ""

#: ../../felupe/docs/tutorial/examples/README.rst:14
#: ../../felupe/docs/tutorial/index.rst:16
msgid ""
"A :class:`step <felupe.Step>` generates the consecutive substep-movements of"
" a given :class:`boundary <felupe.Boundary>` condition. The :class:`step "
"<felupe.Step>` is further added to a list of steps of a :class:`job "
"<felupe.Job>` üë©‚Äçüíª (here, a :class:`characteristic curve "
"<felupe.CharacteristicCurve>` üìà job is used). During :meth:`evaluation "
"<felupe.Job.evaluate>` ‚è≥, each substep of each :class:`step <felupe.Step>` "
"is solved by an iterative :func:`Newton-Rhapson <felupe.newtonrhapson>` "
"procedure ‚öñÔ∏è. The :func:`solution <felupe.tools.NewtonResult>` is exported "
"after each completed substep as a time-series ‚åö XDMF file. Finally, the "
"result of the last completed substep is plotted."
msgstr ""

#: ../../felupe/docs/tutorial/examples/README.rst:16
#: ../../felupe/docs/tutorial/index.rst:18
msgid ""
"Slightly modified code-blocks are provided for different kind of analyses "
"and element formulations."
msgstr ""

#: ../../felupe/docs/tutorial/examples/README.rst:165
#: ../../felupe/docs/tutorial/index.rst:167
msgid "Tutorials"
msgstr ""

#: ../../felupe/docs/tutorial/examples/README.rst:167
#: ../../felupe/docs/tutorial/index.rst:169
msgid ""
"This section is all about learning. Each tutorial focusses on some lessons "
"to learn."
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_tutorial_extut01_getting_started.py>`"
" to download the full example code."
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:22
msgid "Getting Started"
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:22
msgid "Your very first steps with FElupe."
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:26
msgid "create a meshed cube with hexahedron cells"
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:28
msgid "define a numeric region along with a displacement field"
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:30
msgid "load a Neo-Hookean material formulation"
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:32
msgid "apply a uniaxial loadcase"
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:34
msgid "solve the problem"
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:36
msgid "export the displaced mesh"
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:38
msgid ""
"This tutorial covers the essential high-level parts of creating and solving "
"problems with FElupe. As an introductory example, a quarter model of a solid"
" cube with hyperelastic material behaviour is subjected to a uniaxial "
"elongation applied at a clamped end-face. First, let's import FElupe and "
"create a meshed cube out of hexahedron cells with ``n`` points per axis. A "
"numeric region, pre-defined for hexahedrons, is created on the mesh. A "
"vector-valued displacement field is initiated on the region. Next, a field "
"container is created on top of the displacement field."
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:60
msgid ""
"A uniaxial load case is applied on the displacement field stored inside the "
"field container. This involves setting up symmetry planes as well as the "
"absolute value of the prescribed displacement at the mesh-points on the "
"right-end face of the cube. The right-end face is *clamped*: only "
"displacements in direction x are allowed. The dict of boundary conditions "
"for this pre-defined load case are returned as ``boundaries`` and the "
"partitioned degrees of freedom as well as the external displacements are "
"stored within the returned dict ``loadcase``."
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:77
msgid ""
"The material behaviour is defined through a built-in Neo-Hookean material "
"formulation. The constitutive isotropic hyperelastic material formulation is"
" applied on the displacement field by the definition of a solid body."
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:91
msgid ""
"The problem is solved by an iterative :func:`Newton-Rhapson "
"<felupe.newtonrhapson>` procedure. A verbosity level of 2 enables a detailed"
" text-based logging."
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:103
msgid "Results may be viewed in an interactive window."
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:120
msgid ""
":download:`Download Jupyter notebook: extut01_getting_started.ipynb "
"<extut01_getting_started.ipynb>`"
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:124
msgid ""
":download:`Download Python source code: extut01_getting_started.py "
"<extut01_getting_started.py>`"
msgstr ""

#: ../../felupe/docs/tutorial/extut01_getting_started.rst:131
#: ../../felupe/docs/tutorial/extut02_job.rst:129
#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:526
#: ../../felupe/docs/tutorial/index.rst:249
msgid ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_tutorial_extut02_job.py>` to download"
" the full example code."
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:22
msgid "Run a Job"
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:22
msgid ""
"Learn how to apply boundary conditions in a ramped manner within a **Step** "
"and run a **Job**."
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:27
msgid "create a **Step** with ramped boundary conditions"
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:29
msgid "run a **Job** and export a XDMF time-series file"
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:31
msgid ""
"This tutorial once again covers the essential high-level parts of creating "
"and solving problems with FElupe. This time, however, the external "
"displacements are applied in a ramped manner. The prescribed displacements "
"of a cube under non-homogenous :func:`uniaxial loading "
"<felupe.dof.uniaxial>` will be controlled within a :class:`step "
"<felupe.Step>`. The :class:`Ogden-Roxburgh <felupe.OgdenRoxburgh>` pseudo-"
"elastic Mullins softening model is combined with an isotropic hyperelastic "
":class:`Neo-Hookean <felupe.NeoHooke>` material formulation, which is "
"further applied on a :class:`nearly incompressible solid body "
"<felupe.SolidBodyNearlyIncompressible>` for a realistic analysis of rubber-"
"like materials. Note that the bulk modulus is now an argument of the "
"(nearly) incompressible solid body instead of the constitutive Neo-Hookean "
"material definition."
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:62
msgid ""
"The ramped prescribed displacements for 12 substeps are created with "
":func:`~felupe.math.linsteps`. A :class:`~felupe.Step` is created with a "
"list of items to be considered (here, one single solid body) and a dict of "
"ramped boundary conditions along with the prescribed values."
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:79
msgid ""
"This step is now added to a :class:`~felupe.Job`. The results are exported "
"after each completed and successful substep as a time-series XDMF-file. A "
":class:`~felupe.CharacteristicCurve`-job logs the displacement and sum of "
"reaction forces on a given boundary condition."
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:96
msgid ""
"The sum of the reaction force in direction :math:`x` on the boundary "
"condition ``\"move\"`` is plotted as a function of the displacement "
":math:`u` on the boundary condition ``\"move\"`` ."
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:118
msgid ""
":download:`Download Jupyter notebook: extut02_job.ipynb <extut02_job.ipynb>`"
msgstr ""

#: ../../felupe/docs/tutorial/extut02_job.rst:122
msgid ""
":download:`Download Python source code: extut02_job.py <extut02_job.py>`"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_tutorial_extut03_building_blocks.py>`"
" to download the full example code."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:22
msgid "Building Blocks"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:22
msgid "Learn the building blocks of FElupe."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:26
msgid "create a meshed cube with hexahedron elements"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:28
msgid "setup your own numeric region with a mesh, an element and a quadrature"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:30
msgid "add a displacement field to a field container"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:32
msgid "define your own Neo-Hookean material formulation"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:34
msgid "apply your own boundary conditions"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:36
msgid "solve the problem (create your own Newton-Rhapson iteration loop)"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:38
msgid ""
"export the displaced mesh along with cauchy stress projected to mesh-points"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:40
msgid ""
"Start setting up a problem in FElupe by the creation of a numeric "
":class:`~felupe.Region` with a geometry :class:`~felupe.Mesh`, a finite "
"**Element** formulation :class:`~felupe.Hexahedron` and a **Quadrature** "
"rule :class:`~felupe.GaussLegendre`."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:60
msgid "An overview of the mesh-metadata is available in the console."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:72
msgid "Region"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:73
msgid ""
"A :class:`~felupe.Region` essentially pre-calculates element "
"shape/ansatz/basis functions and derivatives evaluated at every quadrature "
"point of every cell w.r.t. the undeformed coordinates (as attribute "
":attr:`~felupe.Region.dhdX`)."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:78
msgid ""
"By using a template region like :class:`~felupe.RegionHexahedron`, only the "
"mesh has to be created. The element formulation and the appropriate "
"quadrature scheme are chosen automatically."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:93
msgid ""
"The scheme of the region, i.e. the element with its point labels and the "
"integration points of the quadrature rule may be plotted."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:105
msgid ""
"An array containing products of quadrature weights multiplied by the "
"determinants of the (geometric) jacobians is stored as the array of "
"(undeformed) differential volumes :attr:`~felupe.Region.dV`. The sum of all "
"differential volumes gives the total (undeformed) volume of the region."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:121
msgid "Field"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:122
msgid ""
"In a next step, a displacement :class:`~felupe.Field` is added to the "
":class:`~felupe.Region`. This may be either a scalar- or a vector-valed "
"field. The values at mesh-points are obtained with the attribute "
":attr:`~felupe.Field.values`. Interpolated field values at quadrature points"
" are calculated with the :meth:`~felupe.Field.interpolate` method. "
"Additionally, the displacement gradient w.r.t. the undeformed coordinates is"
" calculated for every quadrature point of every cell in the region with the "
"field method :meth:`~felupe.Field.grad`. A generalized extraction method "
":meth:`extract(grad=True, add_identity=True, sym=False) "
"<felupe.Field.extract>` allows several arguments to be passed. This involves"
" whether the gradient or the values are extracted. If the gradient is "
"extracted, the identity matrix may be added to the gradient (useful for the "
"calculation of the deformation gradient). Optionally, the symmetric part is "
"returned (small strain tensor)."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:150
msgid ""
"Next, the field is added to a :class:`~felupe.FieldContainer`, which holds "
"one or more fields. Like a :class:`~felupe.Field`, the "
":class:`~felupe.FieldContainer` also provides the :meth:`extract(grad=True, "
"add_identity=True, sym=False) <felupe.FieldContainer.extract>` method, "
"returning a list of interpolated field values or gradients."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:166
msgid ""
"The deformation gradient is obtained by a sum of the identity and the "
"displacement gradient. The :meth:`~felupe.FieldContainer.extract`-method "
"generates a list with extracted values at the integration points for each "
"field in the field container. To evaluate the deformation gradient tensor of"
" the first field of a container, the identity matrix is added to the "
"gradient of the field."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:181
msgid ""
"Methods to evaluate the deformation gradient as well as strain measures are "
"provided in :class:`FieldContainer.evaluate "
"<felupe.field.EvaluateFieldContainer>`."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:197
msgid "Constitution"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:198
msgid ""
"The material behavior has to be provided by the first Piola-Kirchhoff stress"
" tensor as a function of the deformation gradient. FElupe provides a "
"comprehensive constitutive library (see :ref:`felupe-api-constitution`) "
"including :class:`~felupe.NeoHooke`, :class:`~felupe.LinearElastic` and a "
"generalized Hu-Washizu (u,p,J) :class:`~felupe.ThreeFieldVariation`. By "
"alternative, an isotropic material formulation :class:`~felupe.Hyperelastic`"
" is defined by a strain energy density function where both variation "
"(stress) and linearization (elasticity) are carried out by automatic "
"differentiation. The latter one is demonstrated here with a nearly- "
"incompressible version of the Neo-Hookean material model formulation."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:209
msgid ""
"It is important to only use automatic-differentiable math-functions from the"
" NumPy-like modules `tensortrax.math "
"<https://github.com/adtzlr/tensortrax>`_, `tensortrax.math.linalg "
"<https://github.com/adtzlr/tensortrax>`_ or `tensortrax.math.special "
"<https://github.com/adtzlr/tensortrax>`_. TensorTRAX is a dependency of "
"FElupe and hence, is installed along with `FElupe "
"<https://pypi.org/project/felupe/>`_."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:216
msgid ""
"\\psi = \\frac{\\mu}{2} \\left( J^{-2/3}\\ \\text{tr}(\\boldsymbol{C}) - 3 \\right)\n"
"     + \\frac{K}{2} \\left( J - 1 \\right)^2"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:245
msgid "Boundary Conditions"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:246
msgid ""
"Next we enforce boundary conditions on the displacement field. Boundary "
"conditions are stored as a dictionary of multiple :class:`~felupe.Boundary` "
"instances. First, the left end of the cube is fixed. Displacements on the "
"right end are fixed in directions y and z whereas displacements in direction"
" x are prescribed with a user-defined ``value=0.5``. A "
":class:`~felupe.Boundary` holds useful attributes like "
":attr:`~felupe.Boundary.points` or :attr:`~felupe.Boundary.dof`."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:269
msgid "Partition of deegrees of freedom"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:270
msgid ""
"The separation of active and inactive degrees of freedom is performed by a "
"so-called :func:`~felupe.dof.partition`. External values of prescribed "
"displacement degrees of freedom are obtained by the application of the "
"boundary values on the displacement field."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:286
msgid "Integral forms of equilibrium equations"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:287
msgid ""
"The integral (or weak) forms of equilibrium equations are defined by the "
":class:`~felupe.IntegralForm` class, see Eq. :eq:`eq_integral_form`. The "
"pre-evaluated function of interest has to be passed as the ``fun`` argument "
"and the test field as the ``v`` argument. By setting ``grad_v=[True]`` "
"(default), FElupe passes the gradient of the first test field to the "
"integral form. FElupe assumes a linear form if ``u=None`` (default) and "
"creates a bilinear form if a field is passed to the trial field argument "
"``u``."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:295
msgid ""
"\\int_V P_{iJ} : \\frac{\\partial \\delta u_i}{\\partial X_J} \\ dV\n"
"    \\qquad \\text{and} \\qquad \\int_V \\frac{\\partial \\delta u_i} {\\partial X_J} :\n"
"        \\mathbb{A}_{iJkL} : \\frac{\\partial u_k}{\\partial X_L} \\ dV"
msgstr ""
"\\int_V P_{iJ} : \\frac{\\partial \\delta u_i}{\\partial X_J} \\ dV\n"
"    \\qquad \\text{and} \\qquad \\int_V \\frac{\\partial \\delta u_i} {\\partial X_J} :\n"
"        \\mathbb{A}_{iJkL} : \\frac{\\partial u_k}{\\partial X_L} \\ dV"

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:312
msgid ""
"The assembly of both forms lead to the (point-based) internal force vector "
"and the (sparse) stiffness matrix."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:326
msgid "Prepare (partition) and solve the linearized equation system"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:327
msgid ""
"In order to solve the linearized equation system a "
":func:`~felupe.solve.partition` into active and inactive degrees of freedom "
"has to be performed, see Eqs. :eq:`eq_partition`. This system may then be "
"passed to the (sparse direct) solver. Given a set of nonlinear equilibrium "
"equations :math:`\\boldsymbol{g}` the unknowns :math:`\\boldsymbol{u}` are "
"found by linearization at a valid initial state of equilibrium and an "
"iterative Newton-Rhapson solution prodecure. The incremental values of "
"inactive degrees of freedom are given as the difference of external "
"prescribed and current values of unknowns. The (linear) solution is equal to"
" the first result of a Newton-Rhapson iterative solution procedure. The "
"solution ``du`` is finally added to the displacement field."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:338
msgid ""
"\\boldsymbol{g}_1(\\boldsymbol{u}) &= -\\boldsymbol{r}_1(\\boldsymbol{u})\n"
"    + \\boldsymbol{f}_1\n"
"\n"
"\\boldsymbol{g}_1(\\boldsymbol{u} + d\\boldsymbol{u}) &\\approx -\\boldsymbol{r}_1 +\n"
"    \\boldsymbol{f}_1 - \\frac{\\partial \\boldsymbol{r}_1}{\\partial \\boldsymbol{u}_1}\n"
"    \\ d\\boldsymbol{u}_1 - \\frac{\n"
"        \\partial \\boldsymbol{r}_1}{\\partial \\boldsymbol{u}_0} \\ d\\boldsymbol{u}_0\n"
"    = \\boldsymbol{0}\n"
"\n"
"d\\boldsymbol{u}_0 &= \\boldsymbol{u}_0^{(ext)} - \\boldsymbol{u}_0\n"
"\n"
"\\text{solve} \\qquad \\boldsymbol{K}_{11}\\ d\\boldsymbol{u}_1 &=\n"
"    \\boldsymbol{g}_1 - \\boldsymbol{K}_{10}\\ d\\boldsymbol{u}_{0}\n"
"\n"
"\\boldsymbol{u}_0 &+= d\\boldsymbol{u}_0\n"
"\n"
"\\boldsymbol{u}_1 &+= d\\boldsymbol{u}_1"
msgstr ""
"\\boldsymbol{g}_1(\\boldsymbol{u}) &= -\\boldsymbol{r}_1(\\boldsymbol{u})\n"
"    + \\boldsymbol{f}_1\n"
"\n"
"\\boldsymbol{g}_1(\\boldsymbol{u} + d\\boldsymbol{u}) &\\approx -\\boldsymbol{r}_1 +\n"
"    \\boldsymbol{f}_1 - \\frac{\\partial \\boldsymbol{r}_1}{\\partial \\boldsymbol{u}_1}\n"
"    \\ d\\boldsymbol{u}_1 - \\frac{\n"
"        \\partial \\boldsymbol{r}_1}{\\partial \\boldsymbol{u}_0} \\ d\\boldsymbol{u}_0\n"
"    = \\boldsymbol{0}\n"
"\n"
"d\\boldsymbol{u}_0 &= \\boldsymbol{u}_0^{(ext)} - \\boldsymbol{u}_0\n"
"\n"
"\\text{solve} \\qquad \\boldsymbol{K}_{11}\\ d\\boldsymbol{u}_1 &=\n"
"    \\boldsymbol{g}_1 - \\boldsymbol{K}_{10}\\ d\\boldsymbol{u}_{0}\n"
"\n"
"\\boldsymbol{u}_0 &+= d\\boldsymbol{u}_0\n"
"\n"
"\\boldsymbol{u}_1 &+= d\\boldsymbol{u}_1"

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:359
msgid ""
"The default solver of FElupe is `SuperLU "
"<https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.spsolve.html#scipy.sparse.linalg.spsolve>`_"
" provided by the sparse package of `SciPy <https://docs.scipy.org>`_. A "
"significantly faster alternative is `pypardiso "
"<https://pypi.org/project/pypardiso/>`_ which may be installed from PyPI "
"with ``pip install pypardiso`` (not included with FElupe). The optional "
"argument ``solver`` of :func:`~felupe.solve.solve` accepts any user-defined "
"solver."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:382
msgid "A very simple Newton-Rhapson code looks like this:"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:410
msgid ""
"By alternative, one may also use the :func:`Newton-Rhapson "
"<felupe.newtonrhapson>` function of FElupe."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:427
msgid ""
"All 3x3 components of the deformation gradient of integration point 2 of "
"cell 1 (Python is 0-indexed) are obtained with"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:441
msgid "Export and plot of results"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:442
msgid ""
"Results are exported as VTK or XDMF files using `meshio "
"<https://pypi.org/project/meshio/>`_."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:454
msgid ""
"Any tensor at quadrature points, shifted or projected to and averaged at "
"mesh-points, is evaluated for ``quad`` and ``hexahedron`` cell types by "
":func:`~felupe.topoints` or :func:`~felupe.project`, respectively. For "
"example, the calculation of the Cauchy stress involves the conversion from "
"the first Piola-Kirchhoff stress to the Cauchy stress followed by the shift "
"or the projection. The stress results at mesh points are passed as a "
"dictionary to the ``point_data`` argument."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:483
msgid ""
"Instead of writing the simulation results to a VTK-file, point- and cell-"
"data related to a solid body may also be viewed with PyVista. Once again, "
"additional point-data like our stress results at mesh points are passed as a"
" dictionary to the ``point_data`` argument of the "
":meth:`~felupe.SolidBody.view`-method. Cauchy stresses on solid bodies are "
"also pre-defined in FElupe and may be plotted as cell- or (shifted / "
"projected) point-data."
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:515
msgid ""
":download:`Download Jupyter notebook: extut03_building_blocks.ipynb "
"<extut03_building_blocks.ipynb>`"
msgstr ""

#: ../../felupe/docs/tutorial/extut03_building_blocks.rst:519
msgid ""
":download:`Download Python source code: extut03_building_blocks.py "
"<extut03_building_blocks.py>`"
msgstr ""

#: ../../felupe/docs/tutorial/index.rst:187
msgid ":ref:`sphx_glr_tutorial_extut01_getting_started.py`"
msgstr ""

#: ../../felupe/docs/tutorial/index.rst:204
msgid ":ref:`sphx_glr_tutorial_extut02_job.py`"
msgstr ""

#: ../../felupe/docs/tutorial/index.rst:221
msgid ":ref:`sphx_glr_tutorial_extut03_building_blocks.py`"
msgstr ""

#: ../../felupe/docs/tutorial/sg_execution_times.rst:8
msgid "Computation times"
msgstr ""

#: ../../felupe/docs/tutorial/sg_execution_times.rst:9
msgid "**00:00.000** total execution time for 3 files **from tutorial**:"
msgstr ""

#: ../../felupe/docs/tutorial/sg_execution_times.rst:32
msgid "Example"
msgstr ""

#: ../../felupe/docs/tutorial/sg_execution_times.rst:33
msgid "Time"
msgstr ""

#: ../../felupe/docs/tutorial/sg_execution_times.rst:34
msgid "Mem (MB)"
msgstr ""

#: ../../felupe/docs/tutorial/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_tutorial_extut01_getting_started.py` "
"(``extut01_getting_started.py``)"
msgstr ""

#: ../../felupe/docs/tutorial/sg_execution_times.rst:36
#: ../../felupe/docs/tutorial/sg_execution_times.rst:39
#: ../../felupe/docs/tutorial/sg_execution_times.rst:42
msgid "00:00.000"
msgstr ""

#: ../../felupe/docs/tutorial/sg_execution_times.rst:37
#: ../../felupe/docs/tutorial/sg_execution_times.rst:40
#: ../../felupe/docs/tutorial/sg_execution_times.rst:43
msgid "0.0"
msgstr ""

#: ../../felupe/docs/tutorial/sg_execution_times.rst:38
msgid ":ref:`sphx_glr_tutorial_extut02_job.py` (``extut02_job.py``)"
msgstr ""

#: ../../felupe/docs/tutorial/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_tutorial_extut03_building_blocks.py` "
"(``extut03_building_blocks.py``)"
msgstr ""
