# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021-2024, Andreas Dutzler
# This file is distributed under the same license as the FElupe package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2024
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FElupe\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-11-15 00:11+0000\n"
"PO-Revision-Date: 2024-05-25 22:51+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2024\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/193143/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../felupe/docs/examples/ex01_beam.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex01_beam.py>` to download "
"the full example code."
msgstr ""
"完全なサンプルコードをダウンロードするには、 :ref:`最後に進んでください。 "
"<sphx_glr_download_examples_ex01_beam.py>`"

#: ../../felupe/docs/examples/ex01_beam.rst:22
msgid "Cantilever beam under gravity"
msgstr "重力下での片持ち梁"

#: ../../felupe/docs/examples/ex01_beam.rst:22
msgid "Apply a gravity load on a solid body."
msgstr "固体に重力負荷をかけます。"

#: ../../felupe/docs/examples/ex01_beam.rst:26
msgid "create a solid body and apply the gravity load"
msgstr "固体を作成し、重力荷重を加えます。"

#: ../../felupe/docs/examples/ex01_beam.rst:28
msgid "linear-elastic analysis"
msgstr "線形弾性解析"

#: ../../felupe/docs/examples/ex01_beam.rst:30
msgid ""
"The displacement due to gravity of a cantilever beam with young's modulus "
":math:`E=206000` MPa, poisson ratio :math:`\\nu=0.3`, length :math:`L=2000` "
"mm and cross section area :math:`A=a \\cdot a` with :math:`a=100` mm is to "
"be evaluated within a linear-elastic analysis [1]_."
msgstr ""
"ヤング率 :math:`E=206000` MPa、ポアソン比 :math:`\\nu=0.3` 、長さ :math:`L=2000` mm、断面積 "
":math:`a=100` mm の片持ち梁の重力による変位を線形弾性解析 [1]_ で評価します。"

#: ../../felupe/docs/examples/ex01_beam.rst:37
msgid ""
"First, let's create a meshed cube out of hexahedron cells with ``n=(181, 9, "
"9)`` points per axis. A numeric region created on the mesh represents the "
"cantilever beam. A three- dimensional vector-valued displacement field is "
"initiated on the region."
msgstr ""
"まず、1軸あたり ``n=(181, 9, 9)`` "
"点の6面体セルからメッシュ状の立方体を作りましょう。メッシュ上に作成した数値領域が片持ち梁を表します。この領域に3次元のベクトル値変位フィールドを作成します。"

#: ../../felupe/docs/examples/ex01_beam.rst:56
msgid "A fixed boundary condition is applied on the left end of the beam."
msgstr "梁の左端に固定境界条件が適用されます。"

#: ../../felupe/docs/examples/ex01_beam.rst:67
msgid ""
"The material behaviour is defined through a built-in isotropic linear-"
"elastic material formulation."
msgstr "材料の挙動は、組み込みの等方性線形弾性材料定式化によって定義されます。"

#: ../../felupe/docs/examples/ex01_beam.rst:80
msgid ""
"The body force is defined by a (constant) gravity field on a solid body."
msgstr "物体力は、固体上の(一定の)重力場によって定義されます。"

#: ../../felupe/docs/examples/ex01_beam.rst:82
msgid ""
"\\delta W_{ext} = \\int_v \\delta \\boldsymbol{u} \\cdot \\rho \\boldsymbol{g} ~ dv\n"
"\n"
msgstr ""
"\\delta W_{ext} = \\int_v \\delta \\boldsymbol{u} \\cdot \\rho \\boldsymbol{g} ~ dv\n"
"\n"

#: ../../felupe/docs/examples/ex01_beam.rst:96
msgid ""
"Inside a Newton-Rhapson procedure, the weak form of linear elasticity is "
"assembled into the stiffness matrix and the applied gravity field is "
"assembled into the body force vector."
msgstr ""
"Newton-Rhapson法の内部では、線形弾性の弱形式が剛性マトリックスに組み立てられ、適用される重力場が物体力ベクトルに組み立てられます。"

#: ../../felupe/docs/examples/ex01_beam.rst:110
msgid ""
"The magnitude of the displacement field are plotted on a 300x scaled "
"deformed configuration."
msgstr "変位フィールドの大きさは、300倍に拡大された変形形状上にプロットされています。"

#: ../../felupe/docs/examples/ex01_beam.rst:123
#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:332
#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:206
#: ../../felupe/docs/examples/ex18_nonlinear-viscoelasticity-newton.rst:137
#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:202
msgid "References"
msgstr "参考資料"

#: ../../felupe/docs/examples/ex01_beam.rst:124
msgid ""
"Glenk C. et al., *Consideration of Body Forces within Finite Element "
"Analysis*, Strojniški vestnik - Journal of Mechanical Engineering, Faculty "
"of Mechanical Engineering, 2018, |DOI|."
msgstr ""
"Glenk C. et al., *Consideration of Body Forces within Finite Element "
"Analysis*, Strojniški vestnik - Journal of Mechanical Engineering, Faculty "
"of Mechanical Engineering, 2018, |DOI|."

#: ../../felupe/docs/examples/ex01_beam.rst:128
msgid "DOI"
msgstr "DOI"

#: ../../felupe/docs/examples/ex01_beam.rst:140
msgid ""
":download:`Download Jupyter notebook: ex01_beam.ipynb <ex01_beam.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex01_beam.ipynb <ex01_beam.ipynb>`"

#: ../../felupe/docs/examples/ex01_beam.rst:144
msgid ":download:`Download Python source code: ex01_beam.py <ex01_beam.py>`"
msgstr ":download:`Download Python source code: ex01_beam.py <ex01_beam.py>`"

#: ../../felupe/docs/examples/ex01_beam.rst:148
msgid ":download:`Download zipped: ex01_beam.zip <ex01_beam.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex01_beam.rst:155
#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:196
#: ../../felupe/docs/examples/ex03_plasticity.rst:160
#: ../../felupe/docs/examples/ex04_balloon.rst:210
#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:204
#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:246
#: ../../felupe/docs/examples/ex07_engine-mount.rst:255
#: ../../felupe/docs/examples/ex08_shear.rst:264
#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:227
#: ../../felupe/docs/examples/ex10_poisson-equation.rst:101
#: ../../felupe/docs/examples/ex11_notch-stress.rst:159
#: ../../felupe/docs/examples/ex12_foot-bone.rst:90
#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:372
#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:243
#: ../../felupe/docs/examples/ex15_hexmesh-metacone.rst:103
#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:183
#: ../../felupe/docs/examples/ex17_torsion-gif.rst:154
#: ../../felupe/docs/examples/ex18_nonlinear-viscoelasticity-newton.rst:171
#: ../../felupe/docs/examples/ex19_taylor-hood.rst:139
#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:245
#: ../../felupe/docs/examples/index.rst:396
msgid ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr "`Sphinx-Galleryによって生成されたギャラリー <https://sphinx-gallery.github.io>`_"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex02_plate-with-hole.py>` to"
" download the full example code."
msgstr ""
"完全なサンプルコードをダウンロードするには、 :ref:`最後に進んでください。 "
"<sphx_glr_download_examples_ex02_plate-with-hole.py>`"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:22
msgid "Plate with a Hole"
msgstr "穴の開いたプレート"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:22
msgid "Plane stress linear analysis."
msgstr "平面応力線形解析"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:26
msgid "create and mesh a plate with a hole"
msgstr "穴のあいたプレートを作成し、メッシュにする"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:28
msgid "define a solid body with a linear-elastic plane stress material"
msgstr "線形弾塑性平面応力材料で固体を定義します"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:30
msgid "create an external pressure load"
msgstr "外圧負荷を作成します"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:32
msgid "export and plot stress results"
msgstr "応力結果のエクスポートとプロット"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:35
msgid ""
"A plate with length :math:`2L`, height :math:`2h` and a hole with radius "
":math:`r` is subjected to a uniaxial tension :math:`p=-100` MPa. What is "
"being looked for is the von Mises stress distribution and the concentration "
"of normal stress :math:`\\sigma_{11}` over the hole."
msgstr ""

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:57
msgid ""
"Let's create a meshed plate with a hole out of quad cells. Only a quarter "
"model of the plate is considered. The mesh generation is carried out by "
"filling the area between the edge of the hole and the top line. Then, this "
"section is duplicated, mirrored and merged with another rectangle."
msgstr ""
"四角セルで穴のあいたメッシュ・プレートを作ってみましょう。プレートの1/4モデルのみを考えます。メッシュの生成は穴のエッジとトップラインの間の領域を埋めることで行われます。そして、この部分を複製し、ミラーリングして、別の長方形と統合します。"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:84
msgid ""
"A numeric quad-region created on the mesh in combination with a vector-"
"valued displacement field represents the plate. The Boundary conditions for "
"the symmetry planes are generated on the displacement field."
msgstr "ベクトル値の変位場と組み合わせてメッシュ上に作成された数値4値領域がプレートを表します。対称面の境界条件は、変位場上に生成されます。"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:101
msgid ""
"The material behaviour is defined through a built-in isotropic linear-"
"elastic material formulation for plane stress problems. A solid body applies"
" the linear-elastic material formulation on the displacement field."
msgstr ""
"材料挙動は、平面応力問題のための組み込みの等方性線形弾性材料定式化によって定義されます。固体は、変位フィールドに線形弾性材料定式化を適用します。"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:115
msgid ""
"The external uniaxial tension is applied by a pressure load on the right end"
" at :math:`x=L`. Therefore, a boundary region in combination with a field "
"has to be created at :math:`x=L`."
msgstr ""

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:131
msgid ""
"The simulation model is now ready to be solved. The equivalent von Mises "
"Cauchy stress will be plotted. For the two-dimensional case it is calculated"
" by Eq. :eq:`svM`. Stresses, located at quadrature-points of cells, are "
"shifted to and averaged at mesh- points."
msgstr ""

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:136
msgid ""
"\\sigma_{vM} = \\sqrt{\\sigma_{11}^2 + \\sigma_{22}^2 - \\sigma_{11} \\ \\sigma_{22}\n"
"            + 3 \\ \\sigma_{12}^2}"
msgstr ""
"\\sigma_{vM} = \\sqrt{\\sigma_{11}^2 + \\sigma_{22}^2 - \\sigma_{11} \\ \\sigma_{22}\n"
"            + 3 \\ \\sigma_{12}^2}"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:154
msgid ""
"The normal stress distribution :math:`\\sigma_{11}` over the hole at "
":math:`x=0` is plotted with matplotlib."
msgstr ""

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:181
msgid ""
":download:`Download Jupyter notebook: ex02_plate-with-hole.ipynb "
"<ex02_plate-with-hole.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex02_plate-with-hole.ipynb "
"<ex02_plate-with-hole.ipynb>`"

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:185
msgid ""
":download:`Download Python source code: ex02_plate-with-hole.py <ex02_plate-"
"with-hole.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex02_plate-with-hole.rst:189
msgid ""
":download:`Download zipped: ex02_plate-with-hole.zip <ex02_plate-with-"
"hole.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex03_plasticity.py>` to "
"download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:22
msgid "Plasticity with Isotropic Hardening"
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:22
msgid "Small-strain Plasticity"
msgstr "微小ひずみ可塑性"

#: ../../felupe/docs/examples/ex03_plasticity.rst:26
msgid "linear-elastic plastic material formulation with isotropic hardening"
msgstr "等方性硬化を伴う線形弾性塑性材料定式化"

#: ../../felupe/docs/examples/ex03_plasticity.rst:28
msgid "define a body force vector"
msgstr "体積力のベクトルを定義する"

#: ../../felupe/docs/examples/ex03_plasticity.rst:30
msgid "extract state variables"
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:32
msgid ""
"The normal plastic strain due to a body force applied on a solid with a "
"linear-elastic plastic material formulation with isotropic hardening with "
"young's modulus :math:`E=210000`, poisson ratio :math:`\\nu=0.3`, isotropic "
"hardening modulus :math:`K=1000`, yield stress :math:`\\sigma_y=355`, length"
" :math:`L=3` and cross section area :math:`A=1` is to be evaluated."
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:40
msgid ""
"First, let's create a meshed cube out of hexahedron cells with ``n=(16, 6, "
"6)`` points per axis. A three-dimensional vector-valued displacement field "
"is initiated on the numeric region."
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:61
msgid "A fixed boundary condition is applied at :math:`x=0`."
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:72
msgid ""
"The material behaviour is defined through a built-in isotropic linear-"
"elastic plastic material formulation with isotropic hardening."
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:85
msgid "The body force is created on the field of the solid body."
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:87
msgid "\\delta W_{ext} = \\int_v \\delta \\boldsymbol{u} \\cdot \\boldsymbol{b} ~ dv"
msgstr "\\delta W_{ext} = \\int_v \\delta \\boldsymbol{u} \\cdot \\boldsymbol{b} ~ dv"

#: ../../felupe/docs/examples/ex03_plasticity.rst:101
msgid ""
"Inside a Newton-Rhapson procedure, the vectors and matrices are assembled "
"for the given *items* and the boundary conditions are incorporated into the "
"equilibrium equations."
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:116
msgid ""
"A view on the field-container shows the deformed mesh and the normal plastic"
" strain in direction :math:`x` due to the applied body force. The vector of "
"all state variables, stored as a result in the solid body object, is "
"splitted into separate variables. The plastic strain is stored as the second"
" state variable. The mean-per-cell value of the plastic strain in direction "
":math:`x` is exported to the view."
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:145
msgid ""
":download:`Download Jupyter notebook: ex03_plasticity.ipynb "
"<ex03_plasticity.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex03_plasticity.ipynb "
"<ex03_plasticity.ipynb>`"

#: ../../felupe/docs/examples/ex03_plasticity.rst:149
msgid ""
":download:`Download Python source code: ex03_plasticity.py "
"<ex03_plasticity.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex03_plasticity.rst:153
msgid ":download:`Download zipped: ex03_plasticity.zip <ex03_plasticity.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex04_balloon.py>` to "
"download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:22
msgid "Inflation of a hyperelastic balloon"
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:22
msgid "Numeric continuation of a hyperelastic balloon under inner pressure."
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:26
#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:33
msgid "use FElupe with contique"
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:28
msgid "plot pressure-displacement curve"
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:30
msgid "view the deformed balloon"
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:32
#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:36
#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:34
#: ../../felupe/docs/examples/ex11_notch-stress.rst:36
#: ../../felupe/docs/examples/ex12_foot-bone.rst:26
#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:37
msgid "This example requires external packages."
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:39
msgid ""
"With the help of `contique <https://github.com/adtzlr/contique>`_ it is "
"possible to apply a numerical parameter continuation algorithm on any system"
" of equilibrium equations. This advanced tutorial demonstrates the usage of "
"FElupe in conjunction with `contique <https://github.com/adtzlr/contique>`_."
" The unstable inflation of a rectangular hyperelastic balloon demonstrates "
"this powerful approach. The deformed model and the pressure - displacement "
"curve is plotted."
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:49
msgid ""
"First, setup a problem in FElupe as usual (mesh, region, field, boundaries, "
"umat, solid and a pressure boundary). For the material definition we use the"
" :class:`Neo-Hooke <felupe.NeoHookeCompressible>` built-in hyperelastic "
"material formulation, see Eq. :eq:`neo-hookean-strain-energy`."
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:54
msgid ""
"\\psi = \\frac{\\mu}{2} \\left(\n"
"    \\text{tr}(\\boldsymbol{C}) - \\ln(\\det(\\boldsymbol{C}))\n"
"\\right)"
msgstr ""
"\\psi = \\frac{\\mu}{2} \\left(\n"
"    \\text{tr}(\\boldsymbol{C}) - \\ln(\\det(\\boldsymbol{C}))\n"
"\\right)"

#: ../../felupe/docs/examples/ex04_balloon.rst:92
msgid ""
"The next step involves the problem definition for contique. For details have"
" a look at its `README <https://github.com/adtzlr/contique>`_."
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:129
msgid ""
"Next we have to init the problem and specify the initial values of unknowns "
"(the undeformed configuration). After each completed step of the numeric "
"continuation the results are saved."
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:156
msgid ""
"The unstable pressure-controlled equilibrium path is plotted as pressure-"
"displacement curve."
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:172
msgid "The 3d-deformed configuration of the solid body is plotted."
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:195
msgid ""
":download:`Download Jupyter notebook: ex04_balloon.ipynb "
"<ex04_balloon.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex04_balloon.ipynb "
"<ex04_balloon.ipynb>`"

#: ../../felupe/docs/examples/ex04_balloon.rst:199
msgid ""
":download:`Download Python source code: ex04_balloon.py <ex04_balloon.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex04_balloon.rst:203
msgid ":download:`Download zipped: ex04_balloon.zip <ex04_balloon.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex05_rubber-metal-"
"bushing.py>` to download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:22
msgid "Elastic bearing with torsional loading"
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:22
msgid "An elastic bearing with combined multiaxial loading."
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:26
msgid "create and stack meshes"
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:28
msgid "define a boundary condition with torsional loading"
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:30
msgid "work with multiple solid bodies"
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:32
msgid "create a step and add it to a job"
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:34
msgid "plot strains and stresses"
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:43
msgid ""
"An elastic bearing is subjected to combined multiaxial radial-torsional-"
"cardanic loading. First the meshes for the rubber and the metal sheet rings "
"are created."
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:87
msgid ""
"A global region as well as sub-regions for all materials are generated. The "
"same applies to the fields, the material formulations as well as the solid "
"bodies."
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:110
msgid ""
"The boundary conditions are created on the global displacement field. Masks "
"are created for both the innermost and the outermost metal sheet faces."
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:150
msgid ""
"After defining the load step, the simulation model is ready to be solved."
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:163
msgid ""
"The maximum principal values of the logarithmic strain are plotted on the "
"total simulation model as well as on a clipped view."
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:189
msgid ""
":download:`Download Jupyter notebook: ex05_rubber-metal-bushing.ipynb "
"<ex05_rubber-metal-bushing.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex05_rubber-metal-bushing.ipynb "
"<ex05_rubber-metal-bushing.ipynb>`"

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:193
msgid ""
":download:`Download Python source code: ex05_rubber-metal-bushing.py "
"<ex05_rubber-metal-bushing.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex05_rubber-metal-bushing.rst:197
msgid ""
":download:`Download zipped: ex05_rubber-metal-bushing.zip <ex05_rubber-"
"metal-bushing.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex06_rubber-metal-"
"spring.py>` to download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:22
msgid "Hyperelastic Spring"
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:22
msgid "A hyperelastic spring with a simplified frictionless contact."
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:26
msgid "read a mesh file"
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:28
#: ../../felupe/docs/examples/ex07_engine-mount.rst:28
msgid "define an isotropic hyperelastic solid body"
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:30
msgid "setup a simplified frictionless elastic-to-rigid contact interaction"
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:32
msgid "export and plot the log. strain"
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:41
msgid ""
"A `meshed three-dimensional geometry <../_static/ex06_rubber-metal-"
"spring_mesh.vtk>`_ of a rubber-metal spring is loaded by an external axial "
"and lateral displacement. Simplified elastic-to-rigid contact definitions "
"simulate the end stops caused by steel plates at the bottom and the top in "
"direction :math:`z`."
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:64
msgid ""
"A numeric hexahedron-region created on the mesh in combination with a "
"vector-valued displacement field represents the volume of the solid. "
"Imported meshes may contain cells with negative volumes. This is fixed as "
"proposed in the warning message. The Boundary conditions for the "
":math:`y`-symmetry plane as well as the fixed faces on the bottom and the "
"top of the solid are generated on the displacement field."
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:89
msgid ""
"The material behavior is defined through a built-in hyperelastic isotropic "
"Neo-Hookean material formulation. A solid body applies the material "
"formulation on the displacement field."
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:103
msgid ""
"The simplified elastic-to-rigid contact is defined by a multi-point "
"constraint-like formulation which is only active in compression. First, the "
"points on the surface of the solid body are determined. Then, the center "
"(control) point is defined by one of the mesh points on the end faces in "
"direction :math:`z`."
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:132
msgid ""
"The max. principal value of the logarithmic strain, projected to mesh "
"points, will be added to the result file."
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:152
msgid ""
"The simulation model is now ready to be solved. The results are saved within"
" a XDMF- file, where additional point-data is passed to the ``point_data`` "
"argument."
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:188
msgid ""
"The axial-compressive and lateral-shear force-displacement curves are "
"obtained from the characteristic-curve job. The force is multiplied by two "
"due to the fact that only one half of the geometry is simulated."
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:207
msgid ""
"The shear lateral force-displacement curve is again obtained from the "
"characteristic- curve job."
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:231
msgid ""
":download:`Download Jupyter notebook: ex06_rubber-metal-spring.ipynb "
"<ex06_rubber-metal-spring.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex06_rubber-metal-spring.ipynb "
"<ex06_rubber-metal-spring.ipynb>`"

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:235
msgid ""
":download:`Download Python source code: ex06_rubber-metal-spring.py "
"<ex06_rubber-metal-spring.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex06_rubber-metal-spring.rst:239
msgid ""
":download:`Download zipped: ex06_rubber-metal-spring.zip <ex06_rubber-metal-"
"spring.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex07_engine-mount.py>` to "
"download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:22
msgid "Engine Mount"
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:22
msgid "A rubberlike-metal component used as an engine-mount."
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:26
msgid "read and combine mesh files"
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:30
msgid "create consecutive steps and add them to a job"
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:32
msgid "export and plot characteristic curves"
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:35
msgid ""
"An engine-mount is loaded by a combined vertical and horizontal "
"displacement. What is being looked for are the characteristic force-"
"displacement curves in vertical and horizontal directions as well as the "
"logarithmic strain distribution inside the rubber. The air inside the "
"structure is meshed as a hyperelastic solid with no volumetric part of the "
"strain energy function for a simplified treatment of the rubber contact. The"
" metal parts are simplified as rigid bodies. Three mesh files are provided "
"for this example:"
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:43
msgid ""
"a `mesh for the metal parts <../_static/ex07_engine-mount_mesh-metal.vtk>`_,"
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:45
msgid ""
"a `mesh for the rubber blocks <../_static/ex07_engine-mount_mesh-"
"rubber.vtk>`_ as well as"
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:48
msgid ""
"a `mesh for the air <../_static/ex07_engine-mount_mesh-air.vtk>`_ inside the"
" engine mount."
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:72
msgid ""
"A global region as well as sub-regions for all materials are generated. The "
"same applies to the fields."
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:89
msgid ""
"The boundary conditions are created on the global displacement field. First,"
" a mask for all points related to the metal parts is created. Then, this "
"mask is splitted into the inner and the outer metal part."
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:113
msgid ""
"The material behaviour of the rubberlike solid is defined through a built-in"
" hyperelastic isotropic compressible Neo-Hookean material formulation. A "
"solid body applies the material formulation on the displacement field. The "
"air is also simulated by a Neo-Hookean material formulation but with no "
"volumetric contribution and hence, no special mixed-field treatment is "
"necessary here. A crucial parameter is the shear modulus which is used for "
"the simulation of the air. The air is meshed and simulated to capture the "
"contacts of the rubber blocks inside the engine mount during the "
"deformation. Hence, its overall stiffness contribution must be as low as "
"possible. Here, ``1 / 25`` of the shear modulus of the rubber is used. The "
"bulk modulus of the rubber is lowered to provide a more realistic "
"deformation for the three-dimensional component simulated by a plane- strain"
" analysis."
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:138
msgid ""
"After defining the consecutive load steps, the simulation model is ready to "
"be solved. As we are not interested in the strains of the simulated air, a "
"trimmed mesh is specified during the evaluation of the characteristic-curve "
"job. The lateral force- displacement curves are plotted for the two "
"different levels of vertical displacement."
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:220
msgid ""
"The maximum principal values of the logarithmic strain tensors are plotted "
"on the deformed configuration."
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:240
msgid ""
":download:`Download Jupyter notebook: ex07_engine-mount.ipynb <ex07_engine-"
"mount.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex07_engine-mount.ipynb <ex07_engine-"
"mount.ipynb>`"

#: ../../felupe/docs/examples/ex07_engine-mount.rst:244
msgid ""
":download:`Download Python source code: ex07_engine-mount.py <ex07_engine-"
"mount.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex07_engine-mount.rst:248
msgid ""
":download:`Download zipped: ex07_engine-mount.zip <ex07_engine-mount.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex08_shear.py>` to download "
"the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:22
msgid "Non-homogeneous shear"
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:22
msgid "Plane strain hyperelastic non-homogeneous shear loadcase"
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:26
msgid "define a non-homogeneous shear loadcase"
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:28
msgid "use a mixed hyperelastic formulation in plane strain"
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:30
msgid "assign a micro-sphere material formulation"
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:32
msgid "define a step and a job along with a callback-function"
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:34
msgid "export and visualize principal stretches"
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:36
msgid "plot force - displacement curves"
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:38
msgid ""
"Two rubber blocks of height :math:`H` and length :math:`L`, both glued to a "
"rigid plate on their top and bottom faces, are subjected to a displacement "
"controlled non-homogeneous shear deformation by :math:`u_{ext}` in "
"combination with a compressive normal force :math:`F`."
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:47
msgid ""
"Let's create the mesh. An additional center-point is created for a multi-"
"point constraint (MPC). By default, FElupe stores points not connected to "
"any cells in :attr:`Mesh.points_without_cells` and adds them to the list of "
"inactive degrees of freedom. Hence, we have to drop our MPC-centerpoint from"
" that list."
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:75
msgid ""
"A numeric quad-region created on the mesh in combination with a vector-"
"valued displacement field for plane-strain as well as scalar-valued fields "
"for the hydrostatic pressure and the volume ratio represents the rubber "
"numerically. A shear load case is applied on the displacement field. This "
"involves setting up a y-symmetry plane as well as the absolute value of the "
"prescribed shear movement in direction :math:`x` at the MPC-centerpoint."
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:100
msgid ""
"The micro-sphere material formulation is used for the rubber. It is defined "
"as a :class:`~felupe.Hyperelastic` material. The material formulation is "
"finally applied on the plane-strain field, resulting in a hyperelastic solid"
" body."
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:127
msgid ""
"At the centerpoint of a multi-point constraint (MPC) the external shear "
"movement is prescribed. It also ensures a force-free top plate in direction "
":math:`y`."
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:149
msgid ""
"The shear movement is applied in substeps, which are each solved with an "
"iterative newton-rhapson procedure. Inside an iteration, the force residual "
"vector and the tangent stiffness matrix are assembled. The fields are "
"updated with the solution of unknowns. The equilibrium is checked as ratio "
"between the norm of residual forces of the active vs. the norm of the "
"residual forces of the inactive degrees of freedom. If convergence is "
"obtained, the iteration loop ends. Both :math:`y`-displacement and the "
"reaction force in direction :math:`x` of the top plate are saved. This is "
"realized by a callback-function which is called after each successful "
"substep. A step combines all active items along with constant and ramped "
"boundary conditions. Finally, the step is added to a job. A job returns a "
"generator object with the results of all substeps."
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:184
msgid ""
"The principal stretches are evaluated for the maximum deformed "
"configuration. This may be done manually, starting from the deformation "
"gradient tensor, or by modifying the :meth:`FieldContainer.evaluate.strain "
"<felupe.field.EvaluateFieldContainer.strain>`- method to return the "
"principal stretches. For plotting, these values are projected from "
"quadrature-points to mesh-points."
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:217
msgid ""
"The shear force :math:`F_x` vs. the displacements :math:`u_x` and "
":math:`u_y`, all located at the top plate, are plotted."
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:249
msgid ""
":download:`Download Jupyter notebook: ex08_shear.ipynb <ex08_shear.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex08_shear.ipynb <ex08_shear.ipynb>`"

#: ../../felupe/docs/examples/ex08_shear.rst:253
msgid ":download:`Download Python source code: ex08_shear.py <ex08_shear.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex08_shear.rst:257
msgid ":download:`Download zipped: ex08_shear.zip <ex08_shear.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex09_numeric-"
"continuation.py>` to download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:22
msgid "Numeric Continuation"
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:24
msgid ""
"With the help of `contique <https://github.com/adtzlr/contique>`_ (install "
"with ``pip install contique``) it is possible to apply a numerical parameter"
" continuation algorithm on any system of equilibrium equations. This example"
" demonstrates the usage of FElupe in conjunction with contique. An unstable "
"isotropic hyperelastic material formulation is applied on a single "
"hexahedron. The model will be visualized and the resulting force - "
"displacement curve will be plotted."
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:22
msgid "Numeric continuation of a hyperelastic cube."
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:35
msgid "on-the-fly XDMF-file export"
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:37
msgid "plot a force-displacement curve"
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:55
msgid ""
"First, setup a problem as usual (mesh, region, field, boundaries and umat). "
"The unstable material behavior is plotted for uniaxial incompressible "
"tension."
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:82
msgid ""
"An external normal force is applied at :math:`x=1` on a quarter model of a "
"cube with symmetry planes at :math:`x=y=z=0`. Therefore, we have to define "
"an external load vector which will be scaled with the load-proportionality "
"factor :math:`\\lambda` during numeric continuation."
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:102
msgid ""
"The next step involves the problem definition for contique. For details have"
" a look at `contique's README <https://github.com/adtzlr/contique>`_."
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:148
msgid ""
"Next we have to init the problem and specify the initial values of unknowns "
"(the undeformed configuration). After each completed step of the numeric "
"continuation the XDMF-file will be updated."
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:187
msgid ""
"Finally, the force-displacement curve is plotted. It can be seen that the "
"resulting (unstable) force-controlled equilibrium path is equal to the "
"displacement-controlled load case."
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:212
msgid ""
":download:`Download Jupyter notebook: ex09_numeric-continuation.ipynb "
"<ex09_numeric-continuation.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex09_numeric-continuation.ipynb "
"<ex09_numeric-continuation.ipynb>`"

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:216
msgid ""
":download:`Download Python source code: ex09_numeric-continuation.py "
"<ex09_numeric-continuation.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex09_numeric-continuation.rst:220
msgid ""
":download:`Download zipped: ex09_numeric-continuation.zip <ex09_numeric-"
"continuation.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex10_poisson-equation.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex10_poisson-equation.py>` "
"to download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex10_poisson-equation.rst:22
msgid "Poisson Equation"
msgstr ""

#: ../../felupe/docs/examples/ex10_poisson-equation.rst:23
msgid ""
"The `Poisson equation <https://en.wikipedia.org/wiki/Poisson%27s_equation>`_"
" with fixed boundaries on the bottom, top, left and right end-edges and a "
"unit load, as given in Eq. :eq:`poisson` and Eq. :eq:`poisson-boundaries`, "
"is solved on a rectangle."
msgstr ""

#: ../../felupe/docs/examples/ex10_poisson-equation.rst:27
msgid "\\text{div}(\\boldsymbol{\\nabla} u) + f = 0 \\quad \\text{in} \\quad \\Omega"
msgstr ""

#: ../../felupe/docs/examples/ex10_poisson-equation.rst:32
msgid ""
"u &= 0 \\quad \\text{on} \\quad \\Gamma_u\n"
"\n"
"f &= 1 \\quad \\text{in} \\quad \\Omega"
msgstr ""

#: ../../felupe/docs/examples/ex10_poisson-equation.rst:39
msgid ""
"The Poisson equation is transformed into integral form representation by the"
" `divergence (Gauss's) theorem "
"<https://en.wikipedia.org/wiki/Divergence_theorem>`_, see Eq. :eq:`poisson-"
"integral-form`."
msgstr ""

#: ../../felupe/docs/examples/ex10_poisson-equation.rst:43
msgid ""
"\\int_\\Omega \\boldsymbol{\\nabla} (\\delta u) \\cdot \\boldsymbol{\\nabla} (\\Delta u)\n"
"    \\ d\\Omega = \\int_\\Omega  \\delta u \\cdot f \\ d\\Omega"
msgstr ""

#: ../../felupe/docs/examples/ex10_poisson-equation.rst:86
msgid ""
":download:`Download Jupyter notebook: ex10_poisson-equation.ipynb "
"<ex10_poisson-equation.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex10_poisson-equation.ipynb "
"<ex10_poisson-equation.ipynb>`"

#: ../../felupe/docs/examples/ex10_poisson-equation.rst:90
msgid ""
":download:`Download Python source code: ex10_poisson-equation.py "
"<ex10_poisson-equation.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex10_poisson-equation.rst:94
msgid ""
":download:`Download zipped: ex10_poisson-equation.zip <ex10_poisson-"
"equation.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex11_notch-stress.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex11_notch-stress.py>` to "
"download the full example code."
msgstr ""
":ref:`Go to the end <sphx_glr_download_examples_ex11_notch-stress.py>` to "
"download the full example code."

#: ../../felupe/docs/examples/ex11_notch-stress.rst:22
msgid "Notch Stress"
msgstr "切り欠き応力"

#: ../../felupe/docs/examples/ex11_notch-stress.rst:22
msgid "Three-dimensional linear-elastic analysis."
msgstr ""

#: ../../felupe/docs/examples/ex11_notch-stress.rst:26
msgid "create a hexahedron mesh"
msgstr ""

#: ../../felupe/docs/examples/ex11_notch-stress.rst:28
msgid "define a linear-elastic solid body"
msgstr ""

#: ../../felupe/docs/examples/ex11_notch-stress.rst:30
msgid "project the linear-elastic stress tensor to the mesh-points"
msgstr ""

#: ../../felupe/docs/examples/ex11_notch-stress.rst:32
msgid "plot the max. principal stress component"
msgstr ""

#: ../../felupe/docs/examples/ex11_notch-stress.rst:34
msgid "evaluate the fatigue life"
msgstr ""

#: ../../felupe/docs/examples/ex11_notch-stress.rst:43
msgid ""
"A linear-elastic notched plate is subjected to uniaxial tension. The cell-"
"based mean of the stress tensor is projected to the mesh-points and its "
"maximum principal value is plotted."
msgstr ""

#: ../../felupe/docs/examples/ex11_notch-stress.rst:97
msgid ""
"The number of maximum endurable cycles between zero and the applied "
"displacement is evaluated with a SN-curve as denoted in Eq. :eq:`sn-curve`. "
"The range of the maximum principal value of the Cauchy stress tensor is used"
" to evaluate the fatigue life. For simplicity, the stress is evaluated for "
"the total solid body. To consider only stresses on points which lie on the "
"surface of the solid body, the cells on faces "
":meth:`~felupe.RegionHexahedronBoundary.mesh.cells_faces` must be determined"
" first."
msgstr ""

#: ../../felupe/docs/examples/ex11_notch-stress.rst:105
msgid "\\frac{N}{N_D} = \\left( \\frac{S}{S_D} \\right)^{-k}"
msgstr "\\frac{N}{N_D} = \\left( \\frac{S}{S_D} \\right)^{-k}"

#: ../../felupe/docs/examples/ex11_notch-stress.rst:144
msgid ""
":download:`Download Jupyter notebook: ex11_notch-stress.ipynb <ex11_notch-"
"stress.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex11_notch-stress.ipynb <ex11_notch-"
"stress.ipynb>`"

#: ../../felupe/docs/examples/ex11_notch-stress.rst:148
msgid ""
":download:`Download Python source code: ex11_notch-stress.py <ex11_notch-"
"stress.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex11_notch-stress.rst:152
msgid ""
":download:`Download zipped: ex11_notch-stress.zip <ex11_notch-stress.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex12_foot-bone.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex12_foot-bone.py>` to "
"download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex12_foot-bone.rst:22
msgid "Voxelized Foot Bones"
msgstr ""

#: ../../felupe/docs/examples/ex12_foot-bone.rst:23
msgid ""
"A :class:`~felupe.Region` on a voxel-based mesh with uniform hexahedrons "
"should be created with ``uniform=True`` to enhance performance."
msgstr ""

#: ../../felupe/docs/examples/ex12_foot-bone.rst:75
msgid ""
":download:`Download Jupyter notebook: ex12_foot-bone.ipynb <ex12_foot-"
"bone.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex12_foot-bone.ipynb <ex12_foot-"
"bone.ipynb>`"

#: ../../felupe/docs/examples/ex12_foot-bone.rst:79
msgid ""
":download:`Download Python source code: ex12_foot-bone.py <ex12_foot-"
"bone.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex12_foot-bone.rst:83
msgid ":download:`Download zipped: ex12_foot-bone.zip <ex12_foot-bone.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex13_morph-rubber-wheel.py>`"
" to download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:22
msgid "Rotating Rubber Wheel"
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:23
msgid ""
"This example contains a simulation of a rotating rubber wheel in plane "
"strain with the `MORPH <https://doi.org/10.1016/s0749-6419(02)00091-8>`_ "
"material model formulation [1]_. While the rotation is increased, a constant"
" vertical compression is applied to the rubber wheel by a frictionless "
"contact on the bottom. The vertical reaction force is then carried out for "
"the rotation angles. The MORPH material model is implemented as a second "
"Piola-Kirchhoff stress-based formulation with automatic differentiation "
"(JAX). The Tresca invariant of the distortional part of the right Cauchy-"
"Green deformation tensor is used as internal state variable, see Eq. "
":eq:`morph-state-ex`."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:33
msgid ""
"While the `MORPH <https://doi.org/10.1016/s0749-6419(02)00091-8>`_-material "
"formulation captures the Mullins effect and quasi-static hysteresis effects "
"of rubber mixtures very nicely, it has been observed to be unstable for "
"medium- to highly-distorted states of deformation. An alternative "
"implementation by the method of `representative directions <https://nbn-"
"resolving.org/urn:nbn:de:bsz:ch1-qucosa-114428>`_ provides better stability "
"but is computationally more costly [2]_, [3]_."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:40
msgid ""
"\\boldsymbol{C} &= \\boldsymbol{F}^T \\boldsymbol{F}\n"
"\n"
"I_3 &= \\det (\\boldsymbol{C})\n"
"\n"
"\\hat{\\boldsymbol{C}} &= I_3^{-1/3} \\boldsymbol{C}\n"
"\n"
"\\hat{\\lambda}^2_\\alpha &= \\text{eigvals}(\\hat{\\boldsymbol{C}})\n"
"\n"
"\\hat{C}_T &= \\max \\left( \\hat{\\lambda}^2_\\alpha - \\hat{\\lambda}^2_\\beta \\right)\n"
"\n"
"\\hat{C}_T^S &= \\max \\left( \\hat{C}_T, \\hat{C}_{T,n}^S \\right)"
msgstr ""
"\\boldsymbol{C} &= \\boldsymbol{F}^T \\boldsymbol{F}\n"
"\n"
"I_3 &= \\det (\\boldsymbol{C})\n"
"\n"
"\\hat{\\boldsymbol{C}} &= I_3^{-1/3} \\boldsymbol{C}\n"
"\n"
"\\hat{\\lambda}^2_\\alpha &= \\text{eigvals}(\\hat{\\boldsymbol{C}})\n"
"\n"
"\\hat{C}_T &= \\max \\left( \\hat{\\lambda}^2_\\alpha - \\hat{\\lambda}^2_\\beta \\right)\n"
"\n"
"\\hat{C}_T^S &= \\max \\left( \\hat{C}_T, \\hat{C}_{T,n}^S \\right)"

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:55
msgid ""
"A sigmoid-function is used inside the deformation-dependent variables "
":math:`\\alpha`, :math:`\\beta` and :math:`\\gamma`, see Eq. :eq:`morph-"
"sigmoid-ex`."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:58
msgid ""
"f(x) &= \\frac{1}{\\sqrt{1 + x^2}}\n"
"\n"
"\\alpha &= p_1 + p_2 \\ f(p_3\\ C_T^S)\n"
"\n"
"\\beta &= p_4\\ f(p_3\\ C_T^S)\n"
"\n"
"\\gamma &= p_5\\ C_T^S\\ \\left( 1 - f\\left(\\frac{C_T^S}{p_6}\\right) \\right)"
msgstr ""
"f(x) &= \\frac{1}{\\sqrt{1 + x^2}}\n"
"\n"
"\\alpha &= p_1 + p_2 \\ f(p_3\\ C_T^S)\n"
"\n"
"\\beta &= p_4\\ f(p_3\\ C_T^S)\n"
"\n"
"\\gamma &= p_5\\ C_T^S\\ \\left( 1 - f\\left(\\frac{C_T^S}{p_6}\\right) \\right)"

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:69
msgid ""
"The rate of deformation is described by the Lagrangian tensor and its "
"Tresca-invariant, see Eq. :eq:`morph-rate-of-deformation-ex`."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:73
msgid ""
"It is important to evaluate the incremental right Cauchy-Green tensor by the"
" difference of the final and the previous state of deformation, not by its "
"variation with respect to the deformation gradient tensor."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:77
msgid ""
"\\hat{\\boldsymbol{L}} &= \\text{sym}\\left(\n"
"        \\text{dev}(\\boldsymbol{C}^{-1} \\Delta\\boldsymbol{C})\n"
"    \\right) \\hat{\\boldsymbol{C}}\n"
"\n"
"\\lambda_{\\hat{\\boldsymbol{L}}, \\alpha} &= \\text{eigvals}(\\hat{\\boldsymbol{L}})\n"
"\n"
"\\hat{L}_T &= \\max \\left(\n"
"    \\lambda_{\\hat{\\boldsymbol{L}}, \\alpha} - \\lambda_{\\hat{\\boldsymbol{L}}, \\beta}\n"
"\\right)\n"
"\n"
"\\Delta\\boldsymbol{C} &= \\boldsymbol{C} - \\boldsymbol{C}_n"
msgstr ""
"\\hat{\\boldsymbol{L}} &= \\text{sym}\\left(\n"
"        \\text{dev}(\\boldsymbol{C}^{-1} \\Delta\\boldsymbol{C})\n"
"    \\right) \\hat{\\boldsymbol{C}}\n"
"\n"
"\\lambda_{\\hat{\\boldsymbol{L}}, \\alpha} &= \\text{eigvals}(\\hat{\\boldsymbol{L}})\n"
"\n"
"\\hat{L}_T &= \\max \\left(\n"
"    \\lambda_{\\hat{\\boldsymbol{L}}, \\alpha} - \\lambda_{\\hat{\\boldsymbol{L}}, \\beta}\n"
"\\right)\n"
"\n"
"\\Delta\\boldsymbol{C} &= \\boldsymbol{C} - \\boldsymbol{C}_n"

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:92
msgid ""
"The additional stresses evolve between the limiting stresses, see Eq. "
":eq:`morph-stresses-ex`. The additional deviatoric-enforcement terms [1]_ "
"are neglected in this example."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:96
msgid ""
"\\boldsymbol{S}_L &= \\left(\n"
"    \\gamma \\exp \\left(p_7 \\frac{\\hat{\\boldsymbol{L}}}{\\hat{L}_T}\n"
"        \\frac{\\hat{C}_T}{\\hat{C}_T^S} \\right) +\n"
"        p8 \\frac{\\hat{\\boldsymbol{L}}}{\\hat{L}_T}\n"
"\\right) \\boldsymbol{C}^{-1}\n"
"\n"
"\\boldsymbol{S}_A &= \\frac{\n"
"    \\boldsymbol{S}_{A,n} + \\beta\\ \\hat{L}_T\\ \\boldsymbol{S}_L\n"
"}{1 + \\beta\\ \\hat{L}_T}\n"
"\n"
"\\boldsymbol{S} &= 2 \\alpha\\ \\text{dev}( \\hat{\\boldsymbol{C}} )\n"
"    \\boldsymbol{C}^{-1} + \\text{dev}\\left( \\boldsymbol{S}_A\\ \\boldsymbol{C} \\right)\n"
"    \\boldsymbol{C}^{-1}"
msgstr ""
"\\boldsymbol{S}_L &= \\left(\n"
"    \\gamma \\exp \\left(p_7 \\frac{\\hat{\\boldsymbol{L}}}{\\hat{L}_T}\n"
"        \\frac{\\hat{C}_T}{\\hat{C}_T^S} \\right) +\n"
"        p8 \\frac{\\hat{\\boldsymbol{L}}}{\\hat{L}_T}\n"
"\\right) \\boldsymbol{C}^{-1}\n"
"\n"
"\\boldsymbol{S}_A &= \\frac{\n"
"    \\boldsymbol{S}_{A,n} + \\beta\\ \\hat{L}_T\\ \\boldsymbol{S}_L\n"
"}{1 + \\beta\\ \\hat{L}_T}\n"
"\n"
"\\boldsymbol{S} &= 2 \\alpha\\ \\text{dev}( \\hat{\\boldsymbol{C}} )\n"
"    \\boldsymbol{C}^{-1} + \\text{dev}\\left( \\boldsymbol{S}_A\\ \\boldsymbol{C} \\right)\n"
"    \\boldsymbol{C}^{-1}"

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:114
msgid ""
"Only the upper-triangle entries of the symmetric stress-tensor state "
"variables are stored in the solid body."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:203
msgid ""
"The MORPH material model formulation is also available in FElupe, see "
":class:`~felupe.constitution.tensortrax.models.lagrange.morph` (tensortrax) "
"and :class:`~felupe.constitution.jax.models.lagrange.morph` (JAX)."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:207
msgid ""
"The force-stress curves are shown for uniaxial incompressible tension "
"cycles."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:224
msgid "A mesh is created for the wheel with :math:`r=0.4` and :math:`R=1`."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:238
msgid ""
"A quad-region and a plane-strain displacement field are created. Mesh-points"
" at :math:`r` are added to the ``move``-boundary condition. The "
"displacements due to the rotation of the wheel are evaluated for each "
"rotation angle. The center-point of the bottom-edge is moved vertically "
"upwards by ``0.2`` to enforce a vertical reaction force in the rubber wheel."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:245
msgid ""
"Try to simulate more rotation angles and obtain the vertical reaction force "
"of the wheel, e.g. run two full rotations of the wheel with ``angles_deg = "
"fem.math.linsteps([0, 360, 720], num=[18, 18])``."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:280
msgid ""
"A nearly-incompressible solid body is created for the rubber. At the bottom,"
" a frictionless contact edge is created. Both items are added to a step, "
"which is further evaluated in a job. The reaction forces are plotted for the"
" successive rotation angles of the wheel."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:315
msgid ""
"The resulting max. principal values of the Cauchy stresses are shown for the"
" final rotation angle."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:333
msgid ""
"D. Besdo and J. Ihlemann, \"A phenomenological constitutive model for "
"rubberlike materials and its numerical applications\", International Journal"
" of Plasticity, vol. 19, no. 7. Elsevier BV, pp. 1019–1036, Jul. 2003. doi: "
"`10.1016/s0749-6419(02)00091-8 "
"<https://doi.org/10.1016/s0749-6419(02)00091-8>`_."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:338
msgid ""
"M. Freund, \"Verallgemeinerung eindimensionaler Materialmodelle für die "
"Finite-Elemente-Methode\", Dissertation, Technische Universität Chemnitz, "
"Chemnitz, 2013."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:342
msgid ""
"C. Miehe, S. Göktepe and F. Lulei, \"A micro-macro approach to rubber-like "
"materials - Part I: the non-affine micro-sphere model of rubber "
"elasticity\", Journal of the Mechanics and Physics of Solids, vol. 52, no. "
"11. Elsevier BV, pp. 2617–2660, Nov. 2004. doi: `10.1016/j.jmps.2004.03.011 "
"<https://doi.org/10.1016/j.jmps.2004.03.011>`_."
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:357
msgid ""
":download:`Download Jupyter notebook: ex13_morph-rubber-wheel.ipynb "
"<ex13_morph-rubber-wheel.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex13_morph-rubber-wheel.ipynb "
"<ex13_morph-rubber-wheel.ipynb>`"

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:361
msgid ""
":download:`Download Python source code: ex13_morph-rubber-wheel.py "
"<ex13_morph-rubber-wheel.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex13_morph-rubber-wheel.rst:365
msgid ""
":download:`Download zipped: ex13_morph-rubber-wheel.zip <ex13_morph-rubber-"
"wheel.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex14_hyperelasticity.py>` to"
" download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:22
msgid "Best-fit Hyperelastic Material Parameters"
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:22
msgid ""
"Best-fit of hyperelastic material parameters on given experimental data."
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:26
msgid ""
"define a strain-energy function for a hyperelastic material formulation"
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:28
msgid "best-fit the parameters to uniaxial and biaxial tension experiments"
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:30
msgid "plot the standard deviations of the material parameters"
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:32
msgid ""
"The :func:`Extended Tube <felupe.extended_tube>` material model formulation "
"[1]_ is best-fitted on Treloar's uniaxial and biaxial tension data [2]_."
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:101
msgid ""
"An isotropic-hyperelastic material formulation is defined by a strain energy"
" density function. All math-operations must support automatic "
"differentiation and hence, they must be taken from :mod:`tensortrax.math "
"<https://github.com/adtzlr/tensortrax>`. The strain energy function of the "
"Extended Tube model is given in Eq. :eq:`ex-psi-et`"
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:106
msgid ""
"\\psi = \\frac{G_c}{2} \\left[ \\frac{\\left( 1 - \\delta^2 \\right)\n"
"    \\left( \\hat{I}_1 - 3 \\right)}{1 - \\delta^2 \\left( \\hat{I}_1 - 3 \\right)} +\n"
"    \\ln \\left( 1 - \\delta^2 \\left( \\hat{I}_1 - 3 \\right) \\right) \\right] +\n"
"    \\frac{2 G_e}{\\beta^2} \\left( \\hat{\\lambda}_1^{-\\beta} +\n"
"    \\hat{\\lambda}_2^{-\\beta} + \\hat{\\lambda}_3^{-\\beta} - 3 \\right)"
msgstr ""
"\\psi = \\frac{G_c}{2} \\left[ \\frac{\\left( 1 - \\delta^2 \\right)\n"
"    \\left( \\hat{I}_1 - 3 \\right)}{1 - \\delta^2 \\left( \\hat{I}_1 - 3 \\right)} +\n"
"    \\ln \\left( 1 - \\delta^2 \\left( \\hat{I}_1 - 3 \\right) \\right) \\right] +\n"
"    \\frac{2 G_e}{\\beta^2} \\left( \\hat{\\lambda}_1^{-\\beta} +\n"
"    \\hat{\\lambda}_2^{-\\beta} + \\hat{\\lambda}_3^{-\\beta} - 3 \\right)"

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:115
msgid ""
"with the first main invariant of the distortional part of the right Cauchy-"
"Green deformation tensor as given in Eq. :eq:`ex-invariants-et`"
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:118
msgid "D = J^{-2/3} \\text{tr}\\left( \\boldsymbol{C} \\right)"
msgstr "D = J^{-2/3} \\text{tr}\\left( \\boldsymbol{C} \\right)"

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:123
msgid ""
"and the principal stretches, obtained from the distortional part of the "
"right Cauchy-Green deformation tensor, see Eq. :eq:`ex-stretches-et`."
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:126
msgid ""
"\\lambda^2_\\alpha &= \\text{eigvals}\\left( \\boldsymbol{C} \\right)\n"
"\n"
"\\hat{\\lambda}_\\alpha &= J^{-1/3} \\lambda_\\alpha"
msgstr ""
"\\lambda^2_\\alpha &= \\text{eigvals}\\left( \\boldsymbol{C} \\right)\n"
"\n"
"\\hat{\\lambda}_\\alpha &= J^{-1/3} \\lambda_\\alpha"

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:134
msgid ""
"This material formulation is also available in FElupe as "
":func:`~felupe.extended_tube` among other :ref:`hyperelastic material models"
" <felupe-api-constitution-autodiff>`."
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:161
msgid ""
"The material parameters are best-fitted to the experimental data. Relative "
"force- residuals are used. Lower and upper material parameters are used to "
"plot the errors of the force-stretch curves due to the errors of the "
"material parameters."
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:207
msgid ""
"M. Kaliske and G. Heinrich, \"An Extended Tube-Model for Rubber Elasticity: "
"Statistical-Mechanical Theory and Finite Element Implementation\", Rubber "
"Chemistry and Technology, vol. 72, no. 4. Rubber Division, ACS, pp. 602–632,"
" Sep. 01, 1999. doi: `10.5254/1.3538822 "
"<https://www.doi.org/10.5254/1.3538822>`_."
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:213
msgid ""
"L. R. G. Treloar, \"Stress-strain data for vulcanised rubber under various "
"types of deformation\", Transactions of the Faraday Society, vol. 40. Royal "
"Society of Chemistry (RSC), p. 59, 1944. doi: `10.1039/tf9444000059 "
"<https://doi.org/10.1039/tf9444000059>`_. Data available at https://www.uni-"
"due.de/mathematik/ag_neff/neff_hencky."
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:228
msgid ""
":download:`Download Jupyter notebook: ex14_hyperelasticity.ipynb "
"<ex14_hyperelasticity.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex14_hyperelasticity.ipynb "
"<ex14_hyperelasticity.ipynb>`"

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:232
msgid ""
":download:`Download Python source code: ex14_hyperelasticity.py "
"<ex14_hyperelasticity.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex14_hyperelasticity.rst:236
msgid ""
":download:`Download zipped: ex14_hyperelasticity.zip "
"<ex14_hyperelasticity.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex15_hexmesh-metacone.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex15_hexmesh-metacone.py>` "
"to download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex15_hexmesh-metacone.rst:22
msgid "Script-based Hex-meshing"
msgstr ""

#: ../../felupe/docs/examples/ex15_hexmesh-metacone.rst:22
msgid "Create a 3d dynamic mesh for a metacone component out of hexahedrons."
msgstr ""

#: ../../felupe/docs/examples/ex15_hexmesh-metacone.rst:26
msgid "apply :ref:`mesh-tools <felupe-api-mesh>`"
msgstr ""

#: ../../felupe/docs/examples/ex15_hexmesh-metacone.rst:28
msgid ""
"create a :class:`~felupe.MeshContainer` for meshes associated to two "
"materials"
msgstr ""

#: ../../felupe/docs/examples/ex15_hexmesh-metacone.rst:88
msgid ""
":download:`Download Jupyter notebook: ex15_hexmesh-metacone.ipynb "
"<ex15_hexmesh-metacone.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex15_hexmesh-metacone.ipynb "
"<ex15_hexmesh-metacone.ipynb>`"

#: ../../felupe/docs/examples/ex15_hexmesh-metacone.rst:92
msgid ""
":download:`Download Python source code: ex15_hexmesh-metacone.py "
"<ex15_hexmesh-metacone.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex15_hexmesh-metacone.rst:96
msgid ""
":download:`Download zipped: ex15_hexmesh-metacone.zip <ex15_hexmesh-"
"metacone.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex16_deeplearning-torch.py>`"
" to download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:22
msgid "Train a deep neural network"
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:22
msgid "Train a PyTorch model by simulation results."
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:26
msgid "compression of a hyperelastic axisymmetric cylinder"
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:28
msgid "evaluate displacements located at mesh-points"
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:30
msgid "train a neural network on the displacement data"
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:32
msgid "obtain displacements from the PyTorch model and plot the log. strains"
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:34
msgid ""
"First, an axisymmetric model is created. The displacements are saved after "
"each completed substep. Only very few substeps are used to run the "
"simulation."
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:72
msgid ""
"A PyTorch model is trained on the simulation results. For simplicity, "
"testing is skipped and the data is not splitted in batches."
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:133
msgid ""
"Max. principal values of the logarithmic strain tensors are evaluated and "
"plotted based on the PyTorch model displacement results. After 50 epoch "
"runs, the result is quite bad with a lot of unwanted artefacts (noise)."
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:149
msgid "After 500 more epoch runs, the result is much more realistic."
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:168
msgid ""
":download:`Download Jupyter notebook: ex16_deeplearning-torch.ipynb "
"<ex16_deeplearning-torch.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex16_deeplearning-torch.ipynb "
"<ex16_deeplearning-torch.ipynb>`"

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:172
msgid ""
":download:`Download Python source code: ex16_deeplearning-torch.py "
"<ex16_deeplearning-torch.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex16_deeplearning-torch.rst:176
msgid ""
":download:`Download zipped: ex16_deeplearning-torch.zip <ex16_deeplearning-"
"torch.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex17_torsion-gif.py>` to "
"download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:22
msgid "Animated torsional-shear loading"
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:22
msgid "Save an animation of a custom boundary condition."
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:26
msgid "assign non-homogeneous displacements to a boundary condition"
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:28
msgid "create an animation"
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:30
msgid "export a GIF-movie"
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:32
msgid "evaluate the reaction moment on a boundary condition"
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:34
msgid ""
"This example demonstrates how to create a :class:`~felupe.Boundary` for "
"torsional loading. This is somewhat more complicated than a simple boundary "
"condition with identical mesh-point values because the values of the mesh-"
"points are different. However, this is not a problem. FElupe supports arrays"
" to be passed as the ``value``- argument of a :class:`~felupe.Boundary`. "
"This is even possible in a :class:`~felupe.Step` with the ``ramp``-argument."
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:77
msgid ""
"The reaction moment on the centerpoint of the right end face is tracked by a"
" ``callback()`` function when we :meth:`~felupe.Job.evaluate` the "
":class:`~felupe.Job`. During the callback, the animated deformed body is "
"recorded in a GIF-file. After all frames are recorded, it is important to "
"``close()`` the plotter."
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:119
msgid "Finally, let's plot the reaction moment vs. torsion angle curve."
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:139
msgid ""
":download:`Download Jupyter notebook: ex17_torsion-gif.ipynb <ex17_torsion-"
"gif.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex17_torsion-gif.ipynb <ex17_torsion-"
"gif.ipynb>`"

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:143
msgid ""
":download:`Download Python source code: ex17_torsion-gif.py <ex17_torsion-"
"gif.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex17_torsion-gif.rst:147
msgid ""
":download:`Download zipped: ex17_torsion-gif.zip <ex17_torsion-gif.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex18_nonlinear-viscoelasticity-newton.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex18_nonlinear-"
"viscoelasticity-newton.py>` to download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex18_nonlinear-viscoelasticity-newton.rst:22
msgid "Uniaxial loading/unloading of a viscoelastic material (VHB 4910)"
msgstr ""

#: ../../felupe/docs/examples/ex18_nonlinear-viscoelasticity-newton.rst:23
msgid ""
"This example shows how to implement a constitutive material model for rubber"
" viscoelastic materials using a strain energy density function coupled with "
"an ODE for an internal (state) variable [1]_. The ODE is discretized using a"
" backward-Euler scheme and the resulting nonlinear algebraic equations for "
"the internal variable are solved using Newton's method [2]_."
msgstr ""

#: ../../felupe/docs/examples/ex18_nonlinear-viscoelasticity-newton.rst:138
msgid ""
"A. Kumar and O. Lopez-Pamies, \"On the two-potential constitutive modeling "
"of rubber viscoelastic materials\", Comptes Rendus. Mécanique, vol. 344, no."
" 2. Cellule MathDoc/Centre Mersenne, pp. 102–112, Jan. 26, 2016. doi: "
"`10.1016/j.crme.2015.11.004 "
"<http://dx.doi.org/10.1016/j.crme.2015.11.004>`_."
msgstr ""

#: ../../felupe/docs/examples/ex18_nonlinear-viscoelasticity-newton.rst:142
msgid ""
"B. Shrimali, K. Ghosh and O. Lopez-Pamies \"The Nonlinear Viscoelastic "
"Response of Suspensions of Vacuous Bubbles in Rubber: I — Gaussian Rubber "
"with Constant Viscosity\", Journal of Elasticity, vol. 153, pp. 479-508 "
"(2023), Nov. 30, 2021. doi: `10.1007/s10659-021-09868-y "
"<https://doi.org/10.1007/s10659-021-09868-y>`_."
msgstr ""

#: ../../felupe/docs/examples/ex18_nonlinear-viscoelasticity-newton.rst:156
msgid ""
":download:`Download Jupyter notebook: ex18_nonlinear-viscoelasticity-"
"newton.ipynb <ex18_nonlinear-viscoelasticity-newton.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: ex18_nonlinear-viscoelasticity-"
"newton.ipynb <ex18_nonlinear-viscoelasticity-newton.ipynb>`"

#: ../../felupe/docs/examples/ex18_nonlinear-viscoelasticity-newton.rst:160
msgid ""
":download:`Download Python source code: ex18_nonlinear-viscoelasticity-"
"newton.py <ex18_nonlinear-viscoelasticity-newton.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex18_nonlinear-viscoelasticity-newton.rst:164
msgid ""
":download:`Download zipped: ex18_nonlinear-viscoelasticity-newton.zip "
"<ex18_nonlinear-viscoelasticity-newton.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex19_taylor-hood.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex19_taylor-hood.py>` to "
"download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex19_taylor-hood.rst:22
msgid "Mixed-field hyperelasticity with quadratic triangles"
msgstr ""

#: ../../felupe/docs/examples/ex19_taylor-hood.rst:23
msgid ""
"A 90° section of a plane-strain circle is subjected to frictionless uniaxial"
" compression by a vertically moved rigid top plate. A mixed-field "
"formulation is used with quadratic triangles."
msgstr ""

#: ../../felupe/docs/examples/ex19_taylor-hood.rst:41
msgid ""
"A 90° section of a circle with quadratic triangles is created. The midpoints"
" are shifted to the outer radius. An additional point, used as center- "
"(control-) point, is added to the mesh."
msgstr ""

#: ../../felupe/docs/examples/ex19_taylor-hood.rst:57
msgid ""
"Let's create a region for quadratic triangles and a mixed-field container "
"with two dual fields, one for the pressure and another one for the volume "
"ratio. The dual fields are disconnected."
msgstr ""

#: ../../felupe/docs/examples/ex19_taylor-hood.rst:84
msgid ""
"A step is used containts the solid body and the rigid top plate as items. "
"The rigid vertical movement of the top plate is applied in a ramped manner."
msgstr ""

#: ../../felupe/docs/examples/ex19_taylor-hood.rst:101
msgid ""
"The maximum principal values of the Cauchy stress tensor are plotted. The "
"cell-based means are projected to the mesh-points."
msgstr ""

#: ../../felupe/docs/examples/ex19_taylor-hood.rst:124
msgid ""
":download:`Download Jupyter notebook: ex19_taylor-hood.ipynb <ex19_taylor-"
"hood.ipynb>`"
msgstr ""

#: ../../felupe/docs/examples/ex19_taylor-hood.rst:128
msgid ""
":download:`Download Python source code: ex19_taylor-hood.py <ex19_taylor-"
"hood.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex19_taylor-hood.rst:132
msgid ""
":download:`Download zipped: ex19_taylor-hood.zip <ex19_taylor-hood.zip>`"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:13
msgid ""
":ref:`Go to the end <sphx_glr_download_examples_ex20_third-medium-"
"contact.py>` to download the full example code."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:22
msgid "Third Medium Contact"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:22
msgid "Frictionless contact method simulated by a third medium [1]_."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:26
msgid "create a mesh container with multiple meshes"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:28
msgid "define multiple solid bodies and create a top-level field"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:30
msgid "create an animation of the deformed solid"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:32
msgid ""
"This contact method uses a third medium for two solid contact bodies with a "
"a Hessian- based regularization [2]_. First, let's create sub meshes with "
"quad cells for the solid body. All sub meshes are merged by stacking the "
"meshes of the :class:`mesh container <felupe.MeshContainer>` into a "
":class:`mesh <felupe.Mesh>`."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:62
msgid ""
"This is repeated for the medium, where two meshes are added to a mesh "
"container. Extra cells are added on the right edge to improve convergence."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:76
msgid ""
"Both stacked meshes are added to a top-level mesh container. For each mesh "
"of the container, quad regions and plane-strain vector-fields for the "
"displacements are created. The Neo-Hookean isotropic hyperelastic material "
"formulation from the solid body is also used for the isotropic part of the "
"background material but with scaled down material parameters."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:99
msgid ""
"A top-level plane-strain field is created on a stacked mesh. This field "
"includes all unknowns and is required for the selection of prescribed "
"degrees of freedom as well as for Newton's method. The left end edge is "
"fixed and the vertical displacement is prescribed on the outermost top-right"
" point."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:119
msgid ""
"The so-called HuHu-regularization is created by two weak-:func:`forms "
"<felupe.Form>`, which are derived from the regularization potential, see Eq."
" :eq:`huhu-regularization` [3]_."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:123
msgid ""
"\\Pi = \\frac{1}{2} \\int_V\n"
"    \\mathbb{H}(\\boldsymbol{u})~\\vdots~\\mathbb{H}(\\boldsymbol{u})~dV"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:157
msgid ""
"The prescribed displacement is ramped up to the maximum value and released "
"until zero."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:173
msgid ""
"The deformation is captured in a GIF-file. The top-level field has to be "
"passed as the ``x0``-argument for :func:`Newton's method "
"<felupe.newtonrhapson>`, which is called on evaluation. After all frames are"
" recorded, it is important to ``close()`` the plotter."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:204
msgid "https://en.wikipedia.org/wiki/Third_medium_contact_method"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:206
msgid ""
"G. L. Bluhm, O. Sigmund, and K. Poulios, \"Internal contact modeling for "
"finite strain topology optimization\", Computational Mechanics, vol. 67, no."
" 4. Springer Science and Business Media LLC, pp. 1099–1114, Mar. 04, 2021. "
"|DOI-2|."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:214
msgid "DOI-2"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:210
msgid ""
"A. H. Frederiksen, O. Sigmund, and K. Poulios, \"Topology optimization of "
"self- contacting structures\", Computational Mechanics, vol. 73, no. 4. "
"Springer Science and Business Media LLC, pp. 967–981, Oct. 07, 2023. "
"|DOI-3|."
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:217
msgid "DOI-3"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:230
msgid ""
":download:`Download Jupyter notebook: ex20_third-medium-contact.ipynb "
"<ex20_third-medium-contact.ipynb>`"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:234
msgid ""
":download:`Download Python source code: ex20_third-medium-contact.py "
"<ex20_third-medium-contact.py>`"
msgstr ""

#: ../../felupe/docs/examples/ex20_third-medium-contact.rst:238
msgid ""
":download:`Download zipped: ex20_third-medium-contact.zip <ex20_third-"
"medium-contact.zip>`"
msgstr ""

#: ../../felupe/docs/examples/index.rst:6
msgid "Examples"
msgstr ""

#: ../../felupe/docs/examples/index.rst:8
msgid ""
"A gallery of examples. Coarse meshes are used whenever possible to make the "
"examples run fast. Some examples require external packages to be installed."
msgstr ""

#: ../../felupe/docs/examples/index.rst:28
msgid ":ref:`sphx_glr_examples_ex01_beam.py`"
msgstr ":ref:`sphx_glr_examples_ex01_beam.py`"

#: ../../felupe/docs/examples/index.rst:45
msgid ":ref:`sphx_glr_examples_ex02_plate-with-hole.py`"
msgstr ":ref:`sphx_glr_examples_ex02_plate-with-hole.py`"

#: ../../felupe/docs/examples/index.rst:62
msgid ":ref:`sphx_glr_examples_ex03_plasticity.py`"
msgstr ":ref:`sphx_glr_examples_ex03_plasticity.py`"

#: ../../felupe/docs/examples/index.rst:79
msgid ":ref:`sphx_glr_examples_ex04_balloon.py`"
msgstr ":ref:`sphx_glr_examples_ex04_balloon.py`"

#: ../../felupe/docs/examples/index.rst:96
msgid ":ref:`sphx_glr_examples_ex05_rubber-metal-bushing.py`"
msgstr ":ref:`sphx_glr_examples_ex05_rubber-metal-bushing.py`"

#: ../../felupe/docs/examples/index.rst:113
msgid ":ref:`sphx_glr_examples_ex06_rubber-metal-spring.py`"
msgstr ":ref:`sphx_glr_examples_ex06_rubber-metal-spring.py`"

#: ../../felupe/docs/examples/index.rst:130
msgid ":ref:`sphx_glr_examples_ex07_engine-mount.py`"
msgstr ":ref:`sphx_glr_examples_ex07_engine-mount.py`"

#: ../../felupe/docs/examples/index.rst:147
msgid ":ref:`sphx_glr_examples_ex08_shear.py`"
msgstr ":ref:`sphx_glr_examples_ex08_shear.py`"

#: ../../felupe/docs/examples/index.rst:164
msgid ":ref:`sphx_glr_examples_ex09_numeric-continuation.py`"
msgstr ":ref:`sphx_glr_examples_ex09_numeric-continuation.py`"

#: ../../felupe/docs/examples/index.rst:181
msgid ":ref:`sphx_glr_examples_ex10_poisson-equation.py`"
msgstr ":ref:`sphx_glr_examples_ex10_poisson-equation.py`"

#: ../../felupe/docs/examples/index.rst:198
msgid ":ref:`sphx_glr_examples_ex11_notch-stress.py`"
msgstr ":ref:`sphx_glr_examples_ex11_notch-stress.py`"

#: ../../felupe/docs/examples/index.rst:215
msgid ":ref:`sphx_glr_examples_ex12_foot-bone.py`"
msgstr ":ref:`sphx_glr_examples_ex12_foot-bone.py`"

#: ../../felupe/docs/examples/index.rst:232
msgid ":ref:`sphx_glr_examples_ex13_morph-rubber-wheel.py`"
msgstr ":ref:`sphx_glr_examples_ex13_morph-rubber-wheel.py`"

#: ../../felupe/docs/examples/index.rst:249
msgid ":ref:`sphx_glr_examples_ex14_hyperelasticity.py`"
msgstr ":ref:`sphx_glr_examples_ex14_hyperelasticity.py`"

#: ../../felupe/docs/examples/index.rst:266
msgid ":ref:`sphx_glr_examples_ex15_hexmesh-metacone.py`"
msgstr ":ref:`sphx_glr_examples_ex15_hexmesh-metacone.py`"

#: ../../felupe/docs/examples/index.rst:283
msgid ":ref:`sphx_glr_examples_ex16_deeplearning-torch.py`"
msgstr ":ref:`sphx_glr_examples_ex16_deeplearning-torch.py`"

#: ../../felupe/docs/examples/index.rst:300
msgid ":ref:`sphx_glr_examples_ex17_torsion-gif.py`"
msgstr ":ref:`sphx_glr_examples_ex17_torsion-gif.py`"

#: ../../felupe/docs/examples/index.rst:317
msgid ":ref:`sphx_glr_examples_ex18_nonlinear-viscoelasticity-newton.py`"
msgstr ":ref:`sphx_glr_examples_ex18_nonlinear-viscoelasticity-newton.py`"

#: ../../felupe/docs/examples/index.rst:334
msgid ":ref:`sphx_glr_examples_ex19_taylor-hood.py`"
msgstr ""

#: ../../felupe/docs/examples/index.rst:351
msgid ":ref:`sphx_glr_examples_ex20_third-medium-contact.py`"
msgstr ""

#: ../../felupe/docs/examples/sg_execution_times.rst:8
msgid "Computation times"
msgstr ""

#: ../../felupe/docs/examples/sg_execution_times.rst:9
msgid "**00:00.000** total execution time for 20 files **from examples**:"
msgstr ""

#: ../../felupe/docs/examples/sg_execution_times.rst:32
msgid "Example"
msgstr ""

#: ../../felupe/docs/examples/sg_execution_times.rst:33
msgid "Time"
msgstr ""

#: ../../felupe/docs/examples/sg_execution_times.rst:34
msgid "Mem (MB)"
msgstr ""

#: ../../felupe/docs/examples/sg_execution_times.rst:35
msgid ":ref:`sphx_glr_examples_ex01_beam.py` (``ex01_beam.py``)"
msgstr ":ref:`sphx_glr_examples_ex01_beam.py` (``ex01_beam.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:36
#: ../../felupe/docs/examples/sg_execution_times.rst:39
#: ../../felupe/docs/examples/sg_execution_times.rst:42
#: ../../felupe/docs/examples/sg_execution_times.rst:45
#: ../../felupe/docs/examples/sg_execution_times.rst:48
#: ../../felupe/docs/examples/sg_execution_times.rst:51
#: ../../felupe/docs/examples/sg_execution_times.rst:54
#: ../../felupe/docs/examples/sg_execution_times.rst:57
#: ../../felupe/docs/examples/sg_execution_times.rst:60
#: ../../felupe/docs/examples/sg_execution_times.rst:63
#: ../../felupe/docs/examples/sg_execution_times.rst:66
#: ../../felupe/docs/examples/sg_execution_times.rst:69
#: ../../felupe/docs/examples/sg_execution_times.rst:72
#: ../../felupe/docs/examples/sg_execution_times.rst:75
#: ../../felupe/docs/examples/sg_execution_times.rst:78
#: ../../felupe/docs/examples/sg_execution_times.rst:81
#: ../../felupe/docs/examples/sg_execution_times.rst:84
#: ../../felupe/docs/examples/sg_execution_times.rst:87
#: ../../felupe/docs/examples/sg_execution_times.rst:90
#: ../../felupe/docs/examples/sg_execution_times.rst:93
msgid "00:00.000"
msgstr ""

#: ../../felupe/docs/examples/sg_execution_times.rst:37
#: ../../felupe/docs/examples/sg_execution_times.rst:40
#: ../../felupe/docs/examples/sg_execution_times.rst:43
#: ../../felupe/docs/examples/sg_execution_times.rst:46
#: ../../felupe/docs/examples/sg_execution_times.rst:49
#: ../../felupe/docs/examples/sg_execution_times.rst:52
#: ../../felupe/docs/examples/sg_execution_times.rst:55
#: ../../felupe/docs/examples/sg_execution_times.rst:58
#: ../../felupe/docs/examples/sg_execution_times.rst:61
#: ../../felupe/docs/examples/sg_execution_times.rst:64
#: ../../felupe/docs/examples/sg_execution_times.rst:67
#: ../../felupe/docs/examples/sg_execution_times.rst:70
#: ../../felupe/docs/examples/sg_execution_times.rst:73
#: ../../felupe/docs/examples/sg_execution_times.rst:76
#: ../../felupe/docs/examples/sg_execution_times.rst:79
#: ../../felupe/docs/examples/sg_execution_times.rst:82
#: ../../felupe/docs/examples/sg_execution_times.rst:85
#: ../../felupe/docs/examples/sg_execution_times.rst:88
#: ../../felupe/docs/examples/sg_execution_times.rst:91
#: ../../felupe/docs/examples/sg_execution_times.rst:94
msgid "0.0"
msgstr ""

#: ../../felupe/docs/examples/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_examples_ex02_plate-with-hole.py` (``ex02_plate-with-"
"hole.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex02_plate-with-hole.py` (``ex02_plate-with-"
"hole.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:41
msgid ":ref:`sphx_glr_examples_ex03_plasticity.py` (``ex03_plasticity.py``)"
msgstr ":ref:`sphx_glr_examples_ex03_plasticity.py` (``ex03_plasticity.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:44
msgid ":ref:`sphx_glr_examples_ex04_balloon.py` (``ex04_balloon.py``)"
msgstr ":ref:`sphx_glr_examples_ex04_balloon.py` (``ex04_balloon.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_examples_ex05_rubber-metal-bushing.py` (``ex05_rubber-metal-"
"bushing.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex05_rubber-metal-bushing.py` (``ex05_rubber-metal-"
"bushing.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:50
msgid ""
":ref:`sphx_glr_examples_ex06_rubber-metal-spring.py` (``ex06_rubber-metal-"
"spring.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex06_rubber-metal-spring.py` (``ex06_rubber-metal-"
"spring.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:53
msgid ""
":ref:`sphx_glr_examples_ex07_engine-mount.py` (``ex07_engine-mount.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex07_engine-mount.py` (``ex07_engine-mount.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:56
msgid ":ref:`sphx_glr_examples_ex08_shear.py` (``ex08_shear.py``)"
msgstr ":ref:`sphx_glr_examples_ex08_shear.py` (``ex08_shear.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:59
msgid ""
":ref:`sphx_glr_examples_ex09_numeric-continuation.py` (``ex09_numeric-"
"continuation.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex09_numeric-continuation.py` (``ex09_numeric-"
"continuation.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:62
msgid ""
":ref:`sphx_glr_examples_ex10_poisson-equation.py` (``ex10_poisson-"
"equation.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex10_poisson-equation.py` (``ex10_poisson-"
"equation.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:65
msgid ""
":ref:`sphx_glr_examples_ex11_notch-stress.py` (``ex11_notch-stress.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex11_notch-stress.py` (``ex11_notch-stress.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:68
msgid ":ref:`sphx_glr_examples_ex12_foot-bone.py` (``ex12_foot-bone.py``)"
msgstr ":ref:`sphx_glr_examples_ex12_foot-bone.py` (``ex12_foot-bone.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:71
msgid ""
":ref:`sphx_glr_examples_ex13_morph-rubber-wheel.py` (``ex13_morph-rubber-"
"wheel.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex13_morph-rubber-wheel.py` (``ex13_morph-rubber-"
"wheel.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:74
msgid ""
":ref:`sphx_glr_examples_ex14_hyperelasticity.py` "
"(``ex14_hyperelasticity.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex14_hyperelasticity.py` "
"(``ex14_hyperelasticity.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:77
msgid ""
":ref:`sphx_glr_examples_ex15_hexmesh-metacone.py` (``ex15_hexmesh-"
"metacone.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex15_hexmesh-metacone.py` (``ex15_hexmesh-"
"metacone.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:80
msgid ""
":ref:`sphx_glr_examples_ex16_deeplearning-torch.py` (``ex16_deeplearning-"
"torch.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex16_deeplearning-torch.py` (``ex16_deeplearning-"
"torch.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:83
msgid ":ref:`sphx_glr_examples_ex17_torsion-gif.py` (``ex17_torsion-gif.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex17_torsion-gif.py` (``ex17_torsion-gif.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:86
msgid ""
":ref:`sphx_glr_examples_ex18_nonlinear-viscoelasticity-newton.py` "
"(``ex18_nonlinear-viscoelasticity-newton.py``)"
msgstr ""
":ref:`sphx_glr_examples_ex18_nonlinear-viscoelasticity-newton.py` "
"(``ex18_nonlinear-viscoelasticity-newton.py``)"

#: ../../felupe/docs/examples/sg_execution_times.rst:89
msgid ":ref:`sphx_glr_examples_ex19_taylor-hood.py` (``ex19_taylor-hood.py``)"
msgstr ""

#: ../../felupe/docs/examples/sg_execution_times.rst:92
msgid ""
":ref:`sphx_glr_examples_ex20_third-medium-contact.py` (``ex20_third-medium-"
"contact.py``)"
msgstr ""
