# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021-2025, Andreas Dutzler
# This file is distributed under the same license as the FElupe package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FElupe\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-30 00:12+0000\n"
"PO-Revision-Date: 2024-05-25 22:51+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/193143/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../felupe/docs/howto.rst:6
msgid "How-To:"
msgstr "ハウツー"

#: ../../felupe/docs/howto.rst:4
msgid "How-To Guides"
msgstr "ハウツーガイド"

#: ../../felupe/docs/howto/assemble.rst:2
msgid "Assemble Vectors and Matrices"
msgstr ""

#: ../../felupe/docs/howto/assemble.rst:4
msgid ""
"Integral (weak) forms are transformed into sparse vectors and matrices by "
"calling the assemble-method of an :class:`integral "
"form<felupe.IntegralForm>`. The :class:`Neo-Hookean <felupe.NeoHooke>` "
"material model formulation is used to evaluate both the variation and "
"linerization of its strain energy density function."
msgstr ""

#: ../../felupe/docs/howto/assemble.rst:23
msgid ""
"The code for the variation of the total-potential energy, as given in Eq. "
":eq:`total-potential-energy-variation`, is very close to the analytical "
"expression."
msgstr ""

#: ../../felupe/docs/howto/assemble.rst:26
msgid ""
"\\delta \\Pi = \\int_V \\boldsymbol{P} : \\frac{\n"
"    \\partial \\delta \\boldsymbol{u}\n"
"}{\\partial \\boldsymbol{X}} \\ dV"
msgstr ""

#: ../../felupe/docs/howto/assemble.rst:44
msgid ""
"For the linearization, see Eq. :eq:`total-potential-energy-linearization`."
msgstr ""

#: ../../felupe/docs/howto/assemble.rst:46
msgid ""
"\\Delta \\delta \\Pi = \\int_V \\frac{\n"
"    \\partial \\delta \\boldsymbol{u}\n"
"}{\\partial \\boldsymbol{X}} : \\mathbb{A} : \\frac{\n"
"    \\partial \\Delta \\boldsymbol{u}\n"
"}{\\partial \\boldsymbol{X}} \\ dV"
msgstr ""

#: ../../felupe/docs/howto/axi.rst:2
msgid "Two-dimensional Problems"
msgstr ""

#: ../../felupe/docs/howto/axi.rst:4
msgid ""
"For plane-strain and axisymmetric problems a vector-valued field has to be "
"created for the two-dimensional in-plane displacement components."
msgstr ""

#: ../../felupe/docs/howto/axi.rst:28
msgid ""
"The 3x3 deformation gradient for axisymmetric and plane-strain two-"
"dimensional problems is obtained by the "
":meth:`~felupe.FieldAxisymmetric.grad` or "
":meth:`~felupe.FieldAxisymmetric.extract` methods (same for "
":class:`~felupe.FieldPlaneStrain`). For these two-dimensional fields the "
"gradient is modified to return a three-dimensional gradient."
msgstr ""

#: ../../felupe/docs/howto/axi.rst:39
msgid ""
"For simplicity, let's use the isotropic hyperelastic "
":class:`~felupe.NeoHooke` material model formulation."
msgstr ""

#: ../../felupe/docs/howto/axi.rst:48
msgid ""
"Internally, FElupe provides an adopted low-level "
":class:`~felupe.assembly.IntegralFormAxisymmetric` class for the integration"
" and the sparse matrix assemblage of axisymmetric problems. It uses the "
"additional information (e.g. radial coordinates at integration points) "
"stored in :class:`~felupe.FieldAxisymmetric` to provide a consistent "
"interface in comparison to :class:`~felupe.assembly.IntegralFormCartesian`. "
"The top-level :class:`~felupe.IntegralForm` chooses the appropriate low-"
"level integral form based on the kind of field inside the field container."
msgstr ""

#: ../../felupe/docs/howto/axi.rst:64
msgid ""
"To sum up, for axisymmetric problems use :class:`~felupe.FieldAxisymmetric` "
"and for plane-strain problems use :class:`~felupe.FieldPlaneStrain`. Of "
"course, mixed-field formulations may also be used with axisymmetric or "
"plane-strain (displacement) fields."
msgstr ""

#: ../../felupe/docs/howto/composite.rst:2
msgid "Multiple Solid Bodies"
msgstr "複数の固体"

#: ../../felupe/docs/howto/composite.rst:4
msgid ""
"This section demonstrates how to set up a problem with two regions, each "
"associated to a separated solid body. Different element formulations are "
"used for the solid bodies."
msgstr ""

#: ../../felupe/docs/howto/composite.rst:24
msgid ""
"A top-level (vertex) field, which contains all the unknowns, is required for"
" the definition of the boundary conditions as well as for the evaluation of "
"the job."
msgstr ""

#: ../../felupe/docs/howto/composite.rst:28
msgid ""
"Ensure to init the mesh container with ``merge=True``, otherwise the points-"
"array of the container will be empty."
msgstr ""

#: ../../felupe/docs/howto/composite.rst:40
msgid ""
"The sub-meshes are available in the global mesh container, on which the sub-"
"fields are created."
msgstr ""

#: ../../felupe/docs/howto/composite.rst:55
msgid "The displacement boundaries are created on the top-level field."
msgstr ""

#: ../../felupe/docs/howto/composite.rst:66
msgid ""
"The rubber is associated to a Neo-Hookean material formulation whereas the "
"steel is modeled by a linear elastic material formulation. Due to the large "
"rotation, its large-strain formulation is required. For each material a "
"solid body is created."
msgstr ""

#: ../../felupe/docs/howto/composite.rst:82
msgid ""
"A step is created and further added to a job. The global field must be "
"passed as the ``x0`` argument during the evaluation of the job. Internally, "
"all field values are linked automatically, i.e. they share their ``values`` "
"array."
msgstr ""

#: ../../felupe/docs/howto/items.rst:2
msgid "Create Custom Items"
msgstr ""

#: ../../felupe/docs/howto/items.rst:3
msgid ""
"Items are supported to be used in a :class:`~felupe.Step` and in "
":func:`~felupe.newtonrhapson`. They provide methods to assemble a vector and"
" a sparse matrix. An item has to be created as a class which takes a "
":class:`~felupe.FieldContainer` as input argument. In its ``__init__(self, "
"field)`` method, the helpers :class:`~felupe.mechanics.Assemble` and "
":class:`~felupe.mechanics.Results` have to be evaluated and added as "
"attributes. Internal methods which assemble the sparse vector and matrix, "
"optionally with an updated :class:`~felupe.FieldContainer` provided by the "
"`field` argument, have to be linked to :class:`~felupe.mechanics.Assemble`."
msgstr ""

#: ../../felupe/docs/howto/items.rst:15
msgid ""
"This is only a minimal working example for an item. For more details, see "
"the sources of :class:`~felupe.SolidBody` or "
":class:`~felupe.SolidBodyNearlyIncompressible`."
msgstr ""

#: ../../felupe/docs/howto/items.rst:38
msgid "This item is now added to a basic script."
msgstr ""

#: ../../felupe/docs/howto/items.rst:42
msgid ""
"The vector- and matrix-shapes are automatically increased to match the shape"
" of the other items if necessary. Hence, a sparse matrix with shape ``(1, "
"1)`` is a valid choice for a vector or a matrix filled with zeros."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:2
msgid "Generate Meshes"
msgstr "メッシュの生成"

#: ../../felupe/docs/howto/meshgen.rst:4
msgid ""
"FElupe provides a simple mesh generation module :ref:`mesh <felupe-api-"
"mesh>`. A :class:`~felupe.Mesh` instance contains essentially two arrays: "
"one with :attr:`~felupe.Mesh.points` and another one containing the cell "
"connectivities, called :attr:`~felupe.Mesh.cells`. Only a single "
":attr:`~Mesh.cell_type` is supported per :class:`~felupe.Mesh`. Optionally "
"the :attr:`~felupe.Mesh.cell_type` is specified which is used if the mesh is"
" saved as a VTK or a XDMF file. These cell types are identical to cell types"
" used in meshio (`VTK types "
"<https://vtk.org/doc/nightly/html/vtkCellType_8h_source.html>`_): ``line``, "
"``quad`` and ``hexahedron`` for linear lagrange elements or ``triangle`` and"
"  ``tetra`` for 2- and 3-simplices or ``VTK_LAGRANGE_HEXAHEDRON`` for 3d "
"lagrange-cells with polynomial shape functions of arbitrary order."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:44
msgid "A cube by hand"
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:46
msgid ""
"First let's start with the generation of a point at ``x=0``, expanded to a "
"line from ``x=1`` to ``x=3`` with ``n=7`` points. Next, the line is expanded"
" into a rectangle. The ``z`` argument of :func:`~felupe.mesh.expand` "
"represents the total expansion. Again, an expansion of our rectangle leads "
"to a hexahedron. Several other useful functions are available beside "
":func:`~felupe.mesh.expand`: :func:`~felupe.mesh.rotate`, "
":func:`~felupe.mesh.revolve` and "
":func:`~felupe.mesh.merge_duplicate_points`. With these simple tools at "
"hand, rectangles, cubes or cylinders may be constructed with ease."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:60
msgid ""
"Alternatively, these mesh-related tools are also provided as methods of a "
":class:`~felupe.Mesh`."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:71
msgid "Elementary Shapes"
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:73
msgid ""
"Lines, rectangles, cubes, circles and triangles do not have to be "
"constructed manually each time. Instead, some easier to use classes are "
"povided by FElupe like :class:`~felupe.mesh.Line`, "
":class:`~felupe.Rectangle` or :class:`~felupe.Cube`. For non equi-distant "
"points per axis use :class:`~felupe.Grid`."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:82
msgid ""
"For circles, there is :class:`~felupe.Circle` for the creation of a quad-"
"mesh for a circle."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:91
msgid ""
"For triangles, there is :class:`~felupe.mesh.Triangle` for the creation of a"
" quad-mesh for a triangle. For positive cell volumes, the coordinates of "
"``a``, ``b`` and ``c`` must be sorted counter-clockwise around the center "
"point."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:101
msgid "Corner Modifications"
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:103
msgid ""
"For a regular :class:`~felupe.Rectangle` or a :class:`~felupe.Cube`, corners"
" may be modified by :meth:`~felupe.Mesh.modify_corners()`. This is sometimes"
" beneficial for compressive states of deformation."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:113
msgid "Cylinders"
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:115
msgid "Cylinders are created by a revolution of a rectangle."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:130
msgid "Fill between boundaries"
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:132
msgid ""
"Meshed boundaries may be used to fill the area or volume in between for line"
" and quad meshes. A plate with a hole is initiated by a line mesh, which is "
"copied two times for the boundaries. The points arrays are updated for the "
"hole and the upper edge. The face is filled by a quad mesh."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:154
msgid "Connect two quad-meshed faces by hexahedrons:"
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:179
msgid "Combinations of elementary shapes"
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:181
msgid ""
"The elementary shapes are combined to create more complex shapes, e.g. a "
"planar triangular shaped face connected to three arms with rounded ends."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:198
msgid ""
"For quad- and hexahedron-meshes it is possible to extract the boundaries of "
"the mesh by a boundary region. The boundary-mesh consists of the quad-cells "
"which have their **first edge** located at the boundary. Hence, these are "
"not the original cells connected to the boundary. The boundary line-mesh is "
"available as a method. In FElupe, boundaries of cell (volumes) are "
"considered as faces and hence, the line-mesh for the edges of a quad-mesh is"
" obtained by a mesh-*face* method of the boundary region."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:213
msgid ""
"A three-dimensional example demonstrates a combination of two different "
"expansions of a rectangle, fill-betweens of two lines and a circle."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:247
msgid ""
"The boundary mesh isn't visualized correctly in PyVista and in ParaView "
"because there are two duplicated cells at the edges. However, this is not a "
"bug - it's a feature. Each face on the surface has one attached cell - with "
"the surface face as its first face. Hence, at edges, there are two "
"overlapping cells with different point connectivity."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:258
msgid "Boundary modification (runouts)"
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:260
msgid ""
"Indentations (runouts) of the boundary edges or faces are defined by a "
"centerpoint, an axis and their relative amounts (values) per axis. "
"Optionally, the transformation of the point coordinates is restricted to a "
"list of given points."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:281
msgid "Triangle and Tetrahedron meshes"
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:283
msgid ""
"Any quad or tetrahedron mesh may be subdivided (triangulated) to meshes out "
"of Triangles or Tetrahedrons by :func:`~felupe.mesh.triangulate`."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:307
msgid "Meshes with midpoints"
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:309
msgid ""
"If a mesh with midpoints is required by a region, functions for edge, face "
"and volume midpoint insertions are provided in "
":func:`~felupe.mesh.add_midpoints_edges`, "
":func:`~felupe.mesh.add_midpoints_faces` and "
":func:`~felupe.mesh.add_midpoints_volumes`. A low-order mesh, e.g. a mesh "
"with cell-type ``quad``, can be converted to a quadratic mesh with "
":func:`~felupe.mesh.convert`. By default, only midpoints on edges are "
"inserted. Hence, the resulting cell-type is ``quad8``. If midpoints on faces"
" are also calculated, the resulting cell-type is ``quad9``."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:318
msgid "The same also applies on meshes with triangles."
msgstr ""

#: ../../felupe/docs/howto/meshgen.rst:326
msgid ""
"While views on higher-order meshes are possible, it is suggested to use "
"ParaView for the visualization of meshes with midpoints due to the improved "
"representation of the cells."
msgstr ""

#: ../../felupe/docs/howto/mixed.rst:2
msgid "Mixed-Field Problems"
msgstr ""

#: ../../felupe/docs/howto/mixed.rst:4
msgid ""
"FElupe supports mixed-field formulations in a similar way it can handle "
"(default) single-field formulations. The definition of a mixed-field "
"formulation is shown for the hydrostatic-volumetric selective three-field-"
"variation with independend fields for displacements :math:`\\boldsymbol{u}`,"
" pressure :math:`p` and volume ratio :math:`J`. The total potential energy "
"for nearly-incompressible hyperelasticity is formulated with a determinant-"
"modified deformation gradient. The built-in Neo-Hookean material model is "
"used as an argument of :class:`~felupe.ThreeFieldVariation` for mixed-field "
"problems."
msgstr ""

#: ../../felupe/docs/howto/mixed.rst:20
msgid ""
"Next, let's create a meshed cube for a Hood-Taylor element formulation. The "
"family of Hood-Taylor elements have a pressure field which is one order "
"lower than the displacement field. A Hood-Taylor Q2/P1 hexahedron element "
"formulation is created, where a tri-quadratic continuous (Lagrange) 27-point"
" per cell displacement formulation is used in combination with discontinuous"
" (tetra) 4-point per cell formulations for the pressure and volume ratio "
"fields. The mesh of the cube is converted to a tri-quadratic mesh for the "
"displacement field. The tetra regions for the pressure and the volume ratio "
"are created on a dual (disconnected) mesh for the generation of the "
"discontinuous fields."
msgstr ""

#: ../../felupe/docs/howto/mixed.rst:55
msgid ""
"Boundary conditions are enforced on the displacement field. For the pre-"
"defined loadcases like the clamped uniaxial compression, the boundaries are "
"automatically applied on the first field."
msgstr ""

#: ../../felupe/docs/howto/mixed.rst:64
msgid ""
"The Step and Job definitions are identical to ones used with single field "
"formulations. The deformed cube is finally visualized by PyVista. The cell-"
"based means of the maximum principal values of the logarithmic strain tensor"
" are shown."
msgstr ""

#: ../../felupe/docs/howto/project.rst:2
msgid "Project cell values to mesh-points"
msgstr ""

#: ../../felupe/docs/howto/project.rst:4
msgid ""
"This section demonstrates how to move cell-values, located at the quadrature"
" points of cells, to mesh-points. The results of :func:`~felupe.project`, "
":func:`~felupe.topoints` and :func:`~felupe.tools.extrapolate` are compared "
"for the Cauchy stresses of a rectangular block under compression."
msgstr ""

#: ../../felupe/docs/howto/project.rst:22
msgid ""
"Cell-based results, like Cauchy stresses, are not projected to mesh-points "
"by default. Different methods may be used to *move* the cell-data to the "
"mesh-points."
msgstr ""

#: ../../felupe/docs/howto/solid.rst:2
msgid "Solid Bodies as Items for Assembly"
msgstr ""

#: ../../felupe/docs/howto/solid.rst:4
msgid ""
"The mechanics submodule contains classes for the generation of solid bodies."
" Solid body objects are supported as items of a :class:`~felupe.Step` and "
"the :func:`~felupe.newtonrhapson` function."
msgstr ""

#: ../../felupe/docs/howto/solid.rst:9
msgid "Solid Body"
msgstr ""

#: ../../felupe/docs/howto/solid.rst:11
msgid ""
"The generation of internal force vectors and stiffness matrices of solid "
"bodies are provided as assembly-methods of a :class:`~felupe.SolidBody` or a"
" :class:`~felupe.SolidBodyNearlyIncompressible`."
msgstr ""

#: ../../felupe/docs/howto/solid.rst:34
msgid ""
"During assembly, several results are stored, e.g. the gradient of the strain"
" energy density function per unit undeformed volume w.r.t. the deformation "
"gradient (first Piola-Kirchhoff stress tensor). Other results are the "
"deformation gradient or the fourth-order elasticity tensor associated to the"
" first Piola-Kirchhoff stress tensor."
msgstr ""

#: ../../felupe/docs/howto/solid.rst:39
msgid ""
"\\boldsymbol{F} &= \\frac{\n"
"    \\partial \\boldsymbol{x}}{\\partial \\boldsymbol{X}\n"
"}\n"
"\n"
"\\boldsymbol{P} &= \\frac{\n"
"    \\partial \\psi(\\boldsymbol{C}(\\boldsymbol{F}))}{\\partial \\boldsymbol{F}\n"
"}\n"
"\n"
"\\mathbb{A} &= \\frac{\n"
"    \\partial^2 \\psi(\\boldsymbol{C}(\\boldsymbol{F}))\n"
"}{\\partial \\boldsymbol{F}\\ \\partial \\boldsymbol{F}}"
msgstr ""

#: ../../felupe/docs/howto/solid.rst:61
msgid ""
"The Cauchy stress tensor, as well as the gradient and the hessian of the "
"strain energy density function per unit undeformed volume are obtained by "
"evaluate-methods of the solid body."
msgstr ""

#: ../../felupe/docs/howto/solid.rst:65
msgid ""
"\\boldsymbol{P} &= \\frac{\n"
"    \\partial \\psi(\\boldsymbol{C}(\\boldsymbol{F}))}{\\partial \\boldsymbol{F}\n"
"}\n"
"\n"
"\\mathbb{A} &= \\frac{\n"
"    \\partial^2 \\psi(\\boldsymbol{C}(\\boldsymbol{F}))\n"
"}{\\partial \\boldsymbol{F}\\ \\partial \\boldsymbol{F}}\n"
"\n"
"\\boldsymbol{\\sigma} &= \\frac{1}{J} \\boldsymbol{P} \\boldsymbol{F}^T"
msgstr ""

#: ../../felupe/docs/howto/solid.rst:87
msgid "Body Force (Gravity) on a Solid Body"
msgstr ""

#: ../../felupe/docs/howto/solid.rst:89
msgid ""
"The generation of external force vectors or stiffness matrices of body "
"forces acting on solid bodies are provided as assembly-methods of a "
":class:`~felupe.SolidBodyForce`."
msgstr ""

#: ../../felupe/docs/howto/solid.rst:93
msgid "\\delta W_{ext} = \\int_V \\delta \\boldsymbol{u} \\cdot \\rho \\boldsymbol{g} \\ dV"
msgstr "\\delta W_{ext} = \\int_V \\delta \\boldsymbol{u} \\cdot \\rho \\boldsymbol{g} \\ dV"

#: ../../felupe/docs/howto/solid.rst:107
msgid "Pressure Boundary on a Solid Body"
msgstr ""

#: ../../felupe/docs/howto/solid.rst:109
msgid ""
"The generation of force vectors or stiffness matrices of pressure boundaries"
" on solid bodies are provided as assembly-methods of a "
":class:`~felupe.SolidBodyPressure`."
msgstr ""

#: ../../felupe/docs/howto/solid.rst:112
msgid ""
"\\delta W_{ext} = \\int_{\\partial V}\n"
"    \\delta \\boldsymbol{u} \\cdot (-p) \\ J \\boldsymbol{F}^{-T} \\ d\\boldsymbol{A}"
msgstr ""

#: ../../felupe/docs/howto/solid.rst:138
msgid ""
"For axisymmetric problems the boundary region has to be created with the "
"attribute ``ensure_3d=True``."
msgstr ""

#: ../../felupe/docs/howto/solvers.rst:2
msgid "Use external solvers"
msgstr ""

#: ../../felupe/docs/howto/solvers.rst:4
msgid ""
"FElupe uses SuperLU as direct sparse solver by default because it is shipped"
" with SciPy (and SciPy is already a dependency of FElupe). While it is "
"definitely a good choice for small to mid-sized problems, faster "
"alternatives are easy to install and use. This section demonstrates several "
"possibilities, e.g. a fast direct solver from `PyPardiso "
"<https://github.com/haasad/PyPardisoProject>`_ (``pip install pypardiso``) "
"and the :func:`~scipy.sparse.linalg.minres` iterative solver from ``SciPy``."
" Custom solvers may be passed to the evaluation of a :class:`~felupe.Job`."
msgstr ""

#: ../../felupe/docs/howto/solvers.rst:15
msgid "Solvers from SciPy Sparse:"
msgstr ""

#: ../../felupe/docs/howto/solvers.rst:28
msgid "``minres`` may be replaced by another iterative method."
msgstr ""

#: ../../felupe/docs/howto/solvers.rst:39
msgid "Solvers from external packages:"
msgstr ""

#: ../../felupe/docs/howto/solvers.rst:43
#: ../../felupe/docs/howto/solvers.rst:55
msgid ""
"Ensure to have `PyPardiso <https://github.com/haasad/PyPardisoProject>`_  "
"installed."
msgstr ""

#: ../../felupe/docs/howto/umat.rst:2
msgid "Small-Strain based Materials"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:4
msgid ""
"A user material (``umat``) based on the incremental small-strain tensor, "
"e.g. suitable for linear elastic-plastic material formulations, is provided "
"by :class:`~felupe.MaterialStrain`. A user-defined function must be created "
"with the arguments and must return:"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:10
#: ../../felupe/docs/howto/umat_hyperelasticity.rst:7
msgid "**Kind**"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:10
#: ../../felupe/docs/howto/umat_hyperelasticity.rst:7
msgid "**Symbol**"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:10
#: ../../felupe/docs/howto/umat_hyperelasticity.rst:7
msgid "**Description**"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:12 ../../felupe/docs/howto/umat.rst:14
#: ../../felupe/docs/howto/umat.rst:16 ../../felupe/docs/howto/umat.rst:18
#: ../../felupe/docs/howto/umat_hyperelasticity.rst:9
msgid "Argument"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:12
msgid "dε"
msgstr "dε"

#: ../../felupe/docs/howto/umat.rst:12
msgid "strain increment"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:14
msgid "εn"
msgstr "εn"

#: ../../felupe/docs/howto/umat.rst:14
msgid "old strain tensor"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:16
msgid "σn"
msgstr "σn"

#: ../../felupe/docs/howto/umat.rst:16
msgid "old stress tensor"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:18
msgid "ζn"
msgstr "ζn"

#: ../../felupe/docs/howto/umat.rst:18
msgid "list of old state variables"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:20 ../../felupe/docs/howto/umat.rst:22
#: ../../felupe/docs/howto/umat.rst:24
#: ../../felupe/docs/howto/umat_hyperelasticity.rst:11
msgid "Return"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:20
msgid "dσdε"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:20
msgid "tangent modulus"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:22
msgid "σ"
msgstr "σ"

#: ../../felupe/docs/howto/umat.rst:22
msgid "new stress tensor"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:24
msgid "ζ"
msgstr "ζ"

#: ../../felupe/docs/howto/umat.rst:24
msgid "list of new state variables"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:32
msgid ""
"This function is further added as the ``material`` argument of "
":class:`~felupe.MaterialStrain`. If the material makes use of state "
"variables, the shapes of these internal state variables must be provided."
msgstr ""

#: ../../felupe/docs/howto/umat.rst:42
msgid ""
"FElupe contains two reference small-strain user materials, one for linear "
"elastic materials and another one for linear elastic-plastic materials with "
"isotropic hardening:"
msgstr ""

#: ../../felupe/docs/howto/umat.rst:45
msgid ":func:`~felupe.linear_elastic`"
msgstr ":func:`~felupe.linear_elastic`"

#: ../../felupe/docs/howto/umat.rst:46
msgid ":func:`~felupe.linear_elastic_plastic_isotropic_hardening`"
msgstr ":func:`~felupe.linear_elastic_plastic_isotropic_hardening`"

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:2
msgid "Isotropic Hyperelastic Materials"
msgstr ""

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:4
msgid ""
"User materials (Umat) based on the right Cauchy-Green deformation tensor, "
"suitable for Total-Lagrangian isotropic hyperelastic material formulations, "
"are to be created with :class:`~felupe.Hyperelastic`. Only the strain energy"
" function must be defined. Both gradient and hessian are evaluated by "
"forward-mode automatic differentiation. Therefore, only math-functions from "
":mod:`tensortrax.math` are supported. A user-defined function must be "
"created with the argument and return values:"
msgstr ""

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:9
msgid "C"
msgstr "C"

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:9
msgid "right Cauchy-Green deformation tensor"
msgstr ""

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:11
msgid "W"
msgstr "W"

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:11
msgid "strain energy function"
msgstr ""

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:21
msgid ""
"This function is further added as the ``fun`` argument of "
":class:`~felupe.Hyperelastic`."
msgstr ""

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:29
msgid ""
"FElupe contains several reference implementations of hyperelastic user "
"material formulations, like"
msgstr ""

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:32
msgid ":func:`~felupe.constitution.tensortrax.models.hyperelastic.neo_hooke`,"
msgstr ""

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:33
msgid ""
":func:`~felupe.constitution.tensortrax.models.hyperelastic.mooney_rivlin`,"
msgstr ""

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:34
msgid ":func:`~felupe.constitution.tensortrax.models.hyperelastic.yeoh` or"
msgstr ""

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:35
msgid ":func:`~felupe.constitution.tensortrax.models.hyperelastic.ogden`."
msgstr ""

#: ../../felupe/docs/howto/umat_hyperelasticity.rst:37
msgid ""
"A complete list of all available model formulations is available in the "
":ref:`hyperelasticity <felupe-api-constitution-autodiff>` section of the API"
" reference."
msgstr ""
